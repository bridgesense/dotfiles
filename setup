#!/bin/bash
# yadrlite
# Optimized Dotfiles
# # # # # # # # # # # # # # #


# # Options
# # # # # # # # # # # # # # #
USEREPO=no
dir=~/.yadrlite
dotfiles_old=backup
action="${1:-install}"
declare -a files=('vim vimrc tmux.conf profile bash_profile bashrc vimrc.after emacs emacs.d')
declare -a plugins=('https://github.com/rking/ag.vim.git' \
    'https://github.com/jiangmiao/auto-pairs.git' \
    'https://github.com/kien/ctrlp.vim.git' \
    'https://github.com/itchyny/lightline.vim.git' \
    'https://github.com/Shougo/neocomplete.vim.git' \
    'https://github.com/scrooloose/nerdtree.git' \
    'https://github.com/vim-syntastic/syntastic.git' \
    'https://github.com/christoomey/vim-tmux-navigator.git' \
    'https://github.com/joonty/vdebug.git' \
    'https://github.com/gorodinskiy/vim-coloresque.git' \
    'https://github.com/easymotion/vim-easymotion.git' \
    'https://github.com/tpope/vim-fugitive.git' \
    'https://github.com/airblade/vim-gitgutter.git' \
    'https://github.com/bridgesense/vim-hsftp.git' \
    'https://github.com/tpope/vim-surround.git' \
    'https://github.com/morhetz/gruvbox.git' \
    'https://github.com/terryma/vim-multiple-cursors.git' \
    'https://github.com/vim-scripts/YankRing.vim.git' \
    'https://github.com/kchmck/vim-coffee-script.git' \
    'https://github.com/tomtom/tcomment_vim.git' \
    'https://github.com/tpope/vim-repeat.git' \
    'https://github.com/inkarkat/vim-SyntaxRange.git' \
    'https://github.com/PhilRunninger/nerdtree-visual-selection.git' \
    'https://github.com/vim-scripts/MultipleSearch.git' \
    'https://github.com/bridgesense/vim-bufsurf.git')
declare -a tmuxplugins=('https://github.com/tmux-plugins/tmux-resurrect.git' \
    'https://github.com/tmux-plugins/tmux-continuum.git')
declare -a bashplugins=()


# # Routines
# # # # # # # # # # # # # # #
function installed {
    local inststatus=yes
    if [[ $($1 2>&1) =~ (not found) ]]; then
        local inststatus=no
    fi
    vim -c "Helptags" -c "q!"
    echo "$inststatus"
}

function update {
    local dirs=$1
    cd $dirs
    local plugindirs=(*/)
    for pdir in "${plugindirs[@]}"; do
       cd $dirs/$pdir
       echo "Updating $pdir..."
       git pull
    done
    vim -c "Helptags" -c "q!"
    echo "Update finished."
}


# # Remove
# # # # # # # # # # # # # # #
if [ "$action" == "remove" ]; then
    echo "# # Removing Dotfiles and Restoring Settings"
    echo "# # # # # # # # # # # # # # #"
    for cfile in ${files[@]}; do
        rm -rf ~/.$cfile 2>/dev/null
        mv $dir/$dotfiles_old/.$cfile ~/ 2>/dev/null
    done
    rm -rf $dir 2>/dev/null
    vi -c Helptags -c q
    echo "Your original dotfiles have been restored.  Please restart the terminal or re-login to supress error messages."
fi


# # Update
# # # # # # # # # # # # # # #
if [ "$action" == "update" ]; then
    echo "# # Updating Dotfiles"
    echo "# # # # # # # # # # # # # # #"
    if [ ! -f $dir/setup ]; then
        action=install
    else
        cd $dir
        git pull
        update $dir/vim/bundle
        update $dir/tmux/plugin
        update $dir/bash/plugin
        vi -c Helptags -c q
        echo "The update is finished."
    fi
fi


# # Install
# # # # # # # # # # # # # # #
if [ "$action" == "install" ]; then
    echo "# # Installing Dotfiles"
    echo "# # # # # # # # # # # # # # #"
    if [ -f $dir/setup ]; then
        echo "YADRLite is already installed."
        exit
    fi

    if [[ "$(installed 'git --version')" == "no" ]]; then
        echo "'Git' doesn't seem to be installed.  Install it. :)"
        exit
    fi
    if [ "$USEREPO" == "yes" ]; then
        git clone https://github.com/bridgesense/dotfiles.git $dir
    else
        if [ ! -f setup ]; then
            git clone https://github.com/bridgesense/dotfiles.git $dir
        else
            cp -R . $dir
        fi
    fi
    cp $dir/emacs.init $dir/emacs
    mkdir $dir/emacs.d
    sed -i "s@multi-term-program.*@multi-term-program \"$(which bash)\")@" $dir/emacs 2>/dev/null
    cat $dir/tmux/tmux.conf > $dir/tmux.conf
    echo "set-option -g default-command \"exec $(which bash)\"" >> $dir/tmux.conf
    if [[ "$(uname)" == "Darwin" ]]; then
        if [[ "$(installed 'brew info')" == "no" ]]; then
            if [[ "$(installed 'xcode-select -v')" == "no" ]]; then
                echo "This dotfile package requires xcode-select to be installed."
                bash $dir/setup remove
                exit
            else
                xcode-select --install
                mkdir -p ~/Library/Developer/Xcode/UserData/FontAndColorThemes/
                cp -rf $dir/themes/gruvbox/xcode/Gruvbox.xccolortheme ~/Library/Developer/Xcode/UserData/FontAndColorThemes/
                echo "Do you want to install Homebrew?  If you have MacPorts already installed, they may not play well together."
                read -p "Install homebrew? [y,n]" -n 1 -r
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
                    sudo chown -R $USER:admin /usr/local
                fi
            fi
        fi

        if [[ "$(installed 'brew info')" == "yes" ]]; then
            if [[ $(vim --version) != *"+lua"* ]]; then
                brew remove vim 2>/dev/null
                brew install vim --with-lua --with-override-system-vi
            fi

            brew install tmux reattach-to-user-namespace the_silver_searcher ack openssl boris
            # next line fixes bug with newest changes to MacOS security
            ln -s `brew --prefix openssl`/bin/openssl /usr/local/bin/openssl 2>/dev/null
            brew install aspell --with-lang-en
            # fixes the cruddy looking font in Emacs on MacOS
            defaults write org.gnu.Emacs AppleFontSmoothing -int 0
            brew cask install gpg-suite
            brew cask install emacs
            brew tap caskroom/fonts && brew cask install font-dejavu-sans
        fi

        echo '# tmux status options'>> $dir/tmux.conf
        echo "run-shell '. $dir/tmux/plugin/airline-hybrid.tmux'">> $dir/tmux.conf
    elif [[ "$(uname)" == "Linux" ]]; then
        echo "Gnu/Linux detected..."
        echo '# tmux status options'>> $dir/tmux.conf
        echo "run-shell '. $dir/tmux/plugin/airline-hybrid-patched.tmux'">> $dir/tmux.conf
    else
        rm -rf $dir
        echo "I'm sorry, but your OS isn't supported yet."
        exit
    fi

    echo '" Modifications to this file will not be overwritten when YADRLite is updated.' > $dir/vimrc.after
    echo '" If you are using a terminal and have installed the Gruvbox theme, try commenting out the line below.' >> $dir/vimrc.after
    echo "let g:yadr_using_gruvbox_terminal=1" >> $dir/vimrc.after

    echo "" >> $dir/vimrc.after
    echo '" Modify languages as needed.' >> $dir/vimrc.after
    echo 'let g:myLangList=["nospell","en_us","es_es","en_ru"]' >> $dir/vimrc.after

    echo "# # Loading plugins"
    echo "# # # # # # # # # # # # # # #"
    mkdir $dir/vim/bundle 2>/dev/null
    cd $dir/vim/bundle
    for vplug in "${plugins[@]}"; do
        echo "git clone $vplug"
        git clone $vplug
    done
    mkdir $dir/tmux/plugin 2>/dev/null
    cd $dir/tmux/plugin
    for tplug in "${tmuxplugins[@]}"; do
        echo "git clone $tplug"
        git clone $tplug
    done
    cat ~/.bashrc > $dir/bashrc 2>/dev/null
    cat ~/.bash_profile > $dir/bash_profile 2>/dev/null
    if ! grep -q "~/.bashrc" $dir/bash_profile && ! grep -q "~/.bash_profile" $dir/bashrc; then
        cat $dir/bash/bashrc >> $dir/bashrc 2>/dev/null
        echo "source ~/.bashrc" >> $dir/bash_profile 2>/dev/null
    elif ! grep -q "~/.bashrc" $dir/bash_profile; then
        cat $dir/bash/bashrc >> $dir/bash_profile 2>/dev/null
    else
        cat $dir/bash/bashrc >> $dir/bashrc 2>/dev/null
    fi

    # fixes sourcing of bashrc within tmux
    sed -i "s@.*\..*/etc/bashrc@    source /etc/bashrc@g" $dir/bashrc
    sed -i "s@.*\..*~\.bashrc@    source ~/.bashrc@g" $dir/bash_profile

    mkdir $dir/bash/plugin 2>/dev/null
    cd $dir/bash/plugin
    for bplug in "${bashplugins[@]}"; do
        echo "git clone $bplug"
        git clone $bplug
    done

    echo "# # Backing up current configurations"
    echo "# # # # # # # # # # # # # # #"
    cd $dir
    mkdir -p $dotfiles_old 2>/dev/null
    for cfile in ${files[@]}; do
        mv ~/.$cfile $dir/$dotfiles_old/ 2>/dev/null
        ln -s $dir/$cfile ~/.$cfile
    done
    vi -c Helptags -c q

    if [[ "$(uname)" != "Darwin" ]]; then
        echo "This script does not install ack, emacs, silversearcher, tmux or Vim with Lua support. That's something you might look into."
        echo "It is also assumed that a PHP environment is already installed and makes use of such tools as Boris, js-beautify and phpctags."
    fi

    echo "The dotfiles are installed. Restart the terminal or re-login to remote deployment to see changes."
fi
