#!/usr/bin/env bash

# yadrlite
# Optimized Dotfiles
# # # # # # # # # # # # # # #

# # Options
# # # # # # # # # # # # # # #
USEREPO=yes
dir=~/.yadrlite
dotfiles_old=backup
action="${1:-install}"
declare -a files=('vim vimrc tmux.conf profile bash_profile bashrc vimrc.after emacs emacs.d')
declare -a tmuxplugins=('https://github.com/tmux-plugins/tmux-resurrect.git' \
    'https://github.com/tmux-plugins/tmux-continuum.git')

# # Routines
# # # # # # # # # # # # # # #
function installed {
    local inststatus=yes
    if [[ $($1 2>&1) =~ (not found) ]]; then
        local inststatus=no
    fi
    echo "$inststatus"
}

function update {
    local dirs=$1
    cd $dirs
    local plugindirs=(*/)
    for pdir in "${plugindirs[@]}"; do
      cd $dirs/$pdir
      echo "Updating $pdir..."
      if [ -d ".git" ]; then
          git pull --rebase
      fi
    done
}

# # Remove
# # # # # # # # # # # # # # #
if [ "$action" == "remove" ]; then
    echo "# # Removing Dotfiles and Restoring Settings"
    echo "# # # # # # # # # # # # # # # # # # # # # #"
    for cfile in ${files[@]}; do
        rm -rf ~/.$cfile 2>/dev/null
        mv $dir/$dotfiles_old/.$cfile ~/ 2>/dev/null
    done
    rm -rf $dir 2>/dev/null

    echo ""
    echo "Your original dotfiles have been restored.  Please restart"
    echo "the terminal or re-login to supress error messages."
    echo ""
fi


# # Update
# # # # # # # # # # # # # # #
if [ "$action" == "update" ]; then
    echo "# # Updating Dotfiles"
    echo "# # # # # # # # # # # # # # # # # # # # # #"
    if [ ! -f $dir/setup ]; then
        action=install
    else
        cd $dir
        git pull --rebase
        update $dir/tmux/plugin
        echo "The update is finished."
    fi
fi


# # Install
# # # # # # # # # # # # # # #
if [ "$action" == "install" ]; then
    echo "# # Installing Dotfiles"
    echo "# # # # # # # # # # # # # # # # # # # # # #"
    if [ -f $dir/setup ]; then
        echo ""
        echo "YADRLite is already installed."
        exit
    fi

    if ! [ -x "$(command -v git)" ]; then
        echo ""
        echo "'Git' doesn't seem to be installed.  Install it. :)"
        exit
    fi
    if [ "$USEREPO" == "yes" ]; then
        git clone https://github.com/bridgesense/dotfiles.git $dir
    else
        if [ ! -f setup ]; then
            git clone https://github.com/bridgesense/dotfiles.git $dir
        else
            cp -R . $dir
        fi
    fi

    echo "# # Backing up current configurations"
    echo "# # # # # # # # # # # # # # # # # # # # # #"
    cd $dir
    cat ~/.bashrc > $dir/bashrc 2>/dev/null
    cat ~/.bash_profile > $dir/bash_profile 2>/dev/null
    mkdir -p $dotfiles_old 2>/dev/null
    for cfile in ${files[@]}; do
        mv ~/.$cfile $dir/$dotfiles_old/ 2>/dev/null
    done

    echo "# # Vim, Emacs and Tmux Configurations"
    echo "# # # # # # # # # # # # # # # # # # # # # #"
    cat $dir/vim/vimrc >> $dir/vimrc 2>/dev/null
    cat $dir/vim/vimrc.after >> $dir/vimrc.after 2>/dev/null
    cp $dir/emacs.d/emacs.init $dir/emacs
    mkdir -p $dir/emacs.d/.extensions
    unzip $dir/workstation/extensions/xdebug-vscode-plugin.zip -d $dir/emacs.d/.extensions 
    sed -i "s@multi-term-program.*@multi-term-program \"$(which bash)\")@" $dir/emacs 2>/dev/null
    cat $dir/tmux/tmux.conf > $dir/tmux.conf
    echo "set-option -g default-shell \$SHELL" >> $dir/tmux.conf
    if [[ "$(uname)" == "Linux" || "$(uname)" == "FreeBSD" ]]; then
        echo "Gnu/Linux detected..."
        echo '# tmux status options'>> $dir/tmux.conf
        echo "run-shell $dir/tmux/airline-hybrid-patched.tmux">> $dir/tmux.conf
    else
        rm -rf $dir
        echo "Please look into Linux. Your OS isn't supported yet."
        exit
    fi

    echo "# # Loading plugins"
    echo "# # # # # # # # # # # # # # # # # # # # # #"
    mkdir $dir/tmux/plugin 2>/dev/null
    cd $dir/tmux/plugin
    for tplug in "${tmuxplugins[@]}"; do
        echo "git clone $tplug"
        git clone $tplug
    done

    # covers injection into most existing configurations
    if ! grep -q "~/.bashrc" $dir/bash_profile && ! grep -q "~/.bash_profile" $dir/bashrc; then
        cat $dir/bash/bashrc >> $dir/bashrc 2>/dev/null
        echo "source ~/.bashrc" >> $dir/bash_profile 2>/dev/null
    elif ! grep -q "~/.bashrc" $dir/bash_profile; then
        cat $dir/bash/bashrc >> $dir/bash_profile 2>/dev/null
    else
        cat $dir/bash/bashrc >> $dir/bashrc 2>/dev/null
    fi

    # fixes sourcing of bashrc within tmux
    sed -i "s@.*\..*/etc/bashrc@    source /etc/bashrc@g" $dir/bashrc
    sed -i "s@.*\..*~\.bashrc@    source ~/.bashrc@g" $dir/bash_profile

    echo "# # Building Symbolic Links"
    echo "# # # # # # # # # # # # # # # # # # # # # #"
    cd $dir
    mkdir -p $dotfiles_old 2>/dev/null
    for cfile in ${files[@]}; do
        ln -s $dir/$cfile ~/.$cfile
    done

    echo ""
    echo "This script does not install ack, emacs, silversearcher, tmux or"
    echo "Vim with Lua support. That's something you might look into."
    echo ""
    echo "The dotfiles are installed. Restart the terminal or re-login to"
    echo "remote deployment to see changes."
    echo ""
fi
