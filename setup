#!/bin/bash
# yadrlite
# Optimized Dotfiles
# # # # # # # # # # # # # # #


# # Options
# # # # # # # # # # # # # # #
USEREPO=yes
dir=~/.yadrlite
dotfiles_old=backup
action="${1:-install}"
declare -a files="vim vimrc tmux.conf zshrc vimrc.after"
declare -a plugins=('https://github.com/mileszs/ack.vim.git' 'https://github.com/jiangmiao/auto-pairs.git' 'https://github.com/kien/ctrlp.vim.git' 'https://github.com/itchyny/lightline.vim.git' 'https://github.com/Shougo/neocomplete.vim.git' 'https://github.com/scrooloose/nerdtree.git' 'https://github.com/vim-syntastic/syntastic.git' 'https://github.com/joonty/vdebug.git' 'https://github.com/gorodinskiy/vim-coloresque.git' 'https://github.com/easymotion/vim-easymotion.git' 'https://github.com/tpope/vim-fugitive.git' 'https://github.com/airblade/vim-gitgutter.git' 'https://github.com/bridgesense/vim-hsftp.git' 'https://github.com/tpope/vim-obsession.git' 'https://github.com/tpope/vim-surround.git')
declare -a tmuxplugins=('https://github.com/jtdaugherty/tmux-status.git' 'https://github.com/tmux-plugins/tmux-resurrect.git')
declare -a zshplugins=('https://github.com/olivierverdier/zsh-git-prompt.git')


# # Routines
# # # # # # # # # # # # # # #
function installed {
    local inststatus=yes
    if [[ $($1 2>&1) =~ (not found) ]]; then
        local inststatus=no
    fi
    echo "$inststatus"
}

function update {
    local dirs=$1
    cd $dirs
    local plugindirs=(*/)
    for pdir in "${plugindirs[@]}"; do
       cd $dirs/$pdir
       echo "Updating $pdir..."
       git pull
    done
}


# # Remove
# # # # # # # # # # # # # # #
if [ "$action" == "remove" ]; then
    echo "# # Removing Dotfiles and Restoring Settings"
    echo "# # # # # # # # # # # # # # #"
    for cfile in ${files[@]}; do
        rm -rf ~/.$cfile 2>/dev/null
        mv $dir/$dotfiles_old/.$cfile ~/ 2>/dev/null
    done
    rm -rf $dir 2>/dev/null
    echo "Your original dotfiles have been restored."
fi


# # Update
# # # # # # # # # # # # # # #
if [ "$action" == "update" ]; then
    echo "# # Updating Dotfiles"
    echo "# # # # # # # # # # # # # # #"
    cd $dir
    git pull
    update $dir/vim/bundle
    update $dir/tmux/plugin
    update $dir/zsh/plugin
    echo "The update is finished."
fi


# # Install
# # # # # # # # # # # # # # #
if [ "$action" == "install" ]; then
    echo "# # Installing Dotfiles"
    echo "# # # # # # # # # # # # # # #"
    if [ "$USEREPO" == "yes" ]; then
        git clone https://github.com/bridgesense/dotfiles.git $dir
    else
        cp -R . $dir
    fi
    cp $dir/tmux/tmux.conf $dir/tmux.conf
    if [[ "$(uname)" == "Darwin" ]]; then
        if [[ "$(installed 'brew info')" == "no" ]]; then
            if [[ "$(installed 'xcode-select -v')" == "no" ]]; then
                echo "This dotfile package requires xcode-select to be installed."
                bash $dir/setup remove
                exit
            else
                xcode-select --install
                echo "Do you want to install Homebrew?  If you have MacPorts already installed, they may not play well together."
                read -p "Install homebrew? [y,n]" -n 1 -r
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
                    sudo chown -R $USER:admin /usr/local
                fi
            fi
        fi

        if [[ "$(installed 'brew info')" == "yes" ]]; then
            if [[ $(vim --version) != *"+lua"* ]]; then
                brew remove vim 2>/dev/null
                brew install vim --with-lua --with-override-system-vi
            fi

            brew install zsh tmux reattach-to-user-namespace ack
        fi

        echo 'set-option -g default-command "reattach-to-user-namespace -l zsh"' >> $dir/tmux.conf
        echo '# tmux status options'>> $dir/tmux.conf
        echo "set -g status-right '#($dir/tmux/plugin/tmux-status/tmux-status.sh $dir/tmux/tmux-status.conf)'" >> $dir/tmux.conf
    elif [[ "$(uname)" == "Linux" ]]; then
        echo "This script does not install packages for ack, tmux, zsh, zsh-dev or Vim with Lua support on Linux.  If any of the desired packages are needed, they will need to be installed manually by the admin."
        if [[ "$(installed 'zsh --version')" == "yes" ]]; then
            echo "set-option -g default command $(which zsh)" >> $dir/tmux.conf
        fi
    else
        rm -rf $dir
        echo "I'm sorry, but your OS isn't supported yet."
        exit
    fi

    if [[ "$(installed 'zsh --version')" == "yes" ]]; then
        case "$SHELL" in
            */zsh)
	        ;;
            */bash)
                echo "ZSH appears to be installed and is now being setup as this user's default shell. $(whoami)' validation is requested."
                chsh -s $(which zsh) $(whoami)
                ;;
            *)
        esac
    fi

    echo '" Modifications to this file will not be overwritten when YADRLite is updated.' > $dir/vimrc.after
    echo '" If the colors look off in VIM, you may need to comment out the line below.' >> $dir/vimrc.after
    echo "let g:yadr_using_unsolarized_terminal=1" >> $dir/vimrc.after

    echo "" >> $dir/vimrc.after
    echo '" Modify languages as needed.' >> $dir/vimrc.after
    echo 'let g:myLangList=["nospell","en_us","es_es","en_ru"]' >> $dir/vimrc.after

    echo "# # Loading plugins"
    echo "# # # # # # # # # # # # # # #"
    mkdir $dir/vim/bundle 2>/dev/null
    cd $dir/vim/bundle
    for vplug in "${plugins[@]}"; do
        echo "git clone $vplug"
        git clone $vplug
    done
    mkdir $dir/tmux/plugin 2>/dev/null
    cd $dir/tmux/plugin
    for tplug in "${tmuxplugins[@]}"; do
        echo "git clone $tplug"
        git clone $tplug
    done
    mkdir $dir/zsh 2>/dev/null
    mkdir $dir/zsh/plugin 2>/dev/null
    cd $dir/zsh/plugin
    for zplug in "${zshplugins[@]}"; do
        echo "git clone $zplug"
        git clone $zplug
    done


    echo "# # Backing up current configurations"
    echo "# # # # # # # # # # # # # # #"
    cd $dir
    mkdir -p $dotfiles_old 2>/dev/null
    for cfile in ${files[@]}; do
        mv ~/.$cfile $dir/$dotfiles_old/ 2>/dev/null
        ln -s $dir/$cfile ~/.$cfile
    done

    if [[ "$(uname)" == "Darwin" ]]; then
        if [[ "$(installed 'tmux -V')" == "yes" ]]; then
            tmux source ~/.tmux.conf
        fi
    fi

    echo "The dotfiles are installed.  Please close your terminal and reopen it to get started."
fi
