; ~/.emacs --- Emacs Inititialization File
;;; Commentary:
;; This script contains a collection of shortcuts influenced by YADR.  Auto-popup
;; documentation is provided to introduce new users to the key shortcuts.
;; Custom shortcuts can be accessed through typing the YADR leader "," in Evil mode
;; or "Ctrl-," in traditional Emacs modes.
;; # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
;;; Code:

;; Removes Top Toolbar and Scrollbar
;; # # # # # # # # # # #
(if window-system (tool-bar-mode -1))
(if window-system (scroll-bar-mode -1))
(menu-bar-mode -1)
;; (setq frame-resize-pixelwise t)

;; Handles Backup Files
;; # # # # # # # # # # #
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist '((".*" . "~/.emacs.d/.emacs-saves"))   ; don't litter my fs tree
 auto-save-file-name-transforms '((".*" "~/.emacs.d/.emacs-saves" t))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t
 undo-limit (* 1024 1024 1024))       ; use versioned backups

;; compaile threshold adjustment
(setq gc-cons-threshold (eval-when-compile (* 1024 1024 1024)))
(run-with-idle-timer 2 t (lambda () (garbage-collect)))

;; Remember your place
;; # # # # # # # # # # #
(save-place-mode 1)

;; Default Font and Transparency
;; # # # # # # # # # # #
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 120 :family "FiraCode Nerd Font Mono" "DejavuSans Mono" "Monaco" "Fira Code Symbol" "Noto Color Emoji"))))
 '(diff-added ((t (:foreground "#cc241d" :background "#282828"))))
 '(diff-changed ((t (:foreground "#d79921" :background "#282828"))))
 '(diff-context ((t (:inherit default foreground "#ebdbb2" :background "#282828"))))
 '(diff-file-header ((t (:foreground "#ebdbb2" :background "#282828"))))
 '(diff-function ((t (:inherit diff-header: foreground "#ebdbb2" :background "#282828" :inverse-video t))))
 '(diff-header ((t (:foreground "#ebdbb2" :background "#282828"))))
 '(diff-hunk-header ((t (:inherit diff-header :foreground "#ebdbb2" :background "#282828" :inverse-video t))))
 '(diff-index ((t (:foreground "#ebdbb2" :background "#282828"))))
 '(diff-nonexistent ((t (:foreground "#ebdbb2" :background "#282828"))))
 '(diff-refine-added ((t (:foreground "#cc241d" :background "#282828"))))
 '(diff-refine-changed ((t (:foreground "#d79921" :background "#282828"))))
 '(diff-refine-removed ((t (:foreground "#cc241d" :background "#282828"))))
 '(diff-removed ((t (:foreground "#cc241d" :background "#cc241d" :inherit font-lock-comment-face :slant italic))))
 '(ediff-current-diff-A ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-current-diff-Ancestor ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-current-diff-B ((t (:foreground "#d79921" :background "#282828"))))
 '(ediff-current-diff-C ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-even-diff-A ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-even-diff-Ancestor ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-even-diff-B ((t (:foreground "#d79921" :background "#282828"))))
 '(ediff-even-diff-C ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-fine-diff-A ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-fine-diff-Ancestor ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-fine-diff-B ((t (:foreground "#d79921" :background "#282828"))))
 '(ediff-fine-diff-C ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-odd-diff-A ((t (:foreground "#cc241d" :background "#282828"))))
 '(ediff-odd-diff-B ((t (:foreground "#d79921" :background "#282828"))))
 '(ediff-odd-diff-C ((t (:foreground "#cc241d" :background "#282828"))))
 '(org-level-1 ((t (:inherit default :weight bold))))
 '(org-level-2 ((t (:inherit default :weight bold))))
 '(org-level-3 ((t (:inherit default :weight bold))))
 '(org-level-4 ((t (:inherit default :weight bold))))
 '(org-level-5 ((t (:inherit default :weight bold))))
 '(org-level-6 ((t (:inherit default :weight bold))))
 '(org-level-7 ((t (:inherit default :weight bold))))
 '(org-level-8 ((t (:inherit default :weight bold)))))
(set-frame-parameter (selected-frame) 'alpha '(97 . 97))
(add-to-list 'default-frame-alist '(alpha . (97 . 97)))
;; allow font resizing
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

;; Additional Repos
;; # # # # # # # # # # #
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
;; (setq gnutls-algorithm-priority "SECURE128:+SECURE192:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.3")

;; Misc
;; # # # # # # # # # # #
;; Tabs to spaces
(setq-default indent-tabs-mode nil)
;; Tab width
(setq-default tab-width 4)
(setq c-basic-offset 4)
(setq indent-line-function 'insert-tab)
;; Turn off line wrapping by default
(set-default 'truncate-lines t)
;; Set default browser
(setq browse-url-browser-function 'w3m-browse-url)
;; Turn off alarms
(setq ring-bell-function 'ignore)
;; set the default encoding system
(prefer-coding-system 'utf-8)
(setq default-file-name-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
;; GPUPG Fix
(setf epa-pinentry-mode 'loopback)
;; supress warnings
(setq warning-minimum-level :emergency)
;; show recently opened files
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)

;; Package Management
;; # # # # # # # # # # #
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))

;; File Management
;; # # # # # # # # # # #
(use-package ranger :ensure t)
(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))

;; quelpa handler
;; (use-package quelpa-use-package :ensure t)

;; For Diminishing TMI stuff on the mode line
;; # # # # # # # # # # #
(use-package diminish :ensure t)

;; CSV Mode
;; (use-package csv-mode :ensure t)

;; ligatures
(use-package fira-code-mode
  :if (display-graphic-p)
  :ensure t
  :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x")) ;; List of ligatures to turn off
  :hook prog-mode
  :config
  (fira-code-mode-set-font))
; warning! Don't use global-fira-code-mode or it breaks image-mode
; install fira code symbols manually for ligatures to work
; m-x fira-code-mode-install-fonts
; m-x all-the-icons-install-fonts


;; emojis
(use-package emojify
  :ensure t
  :if (display-graphic-p)
  :hook (after-init . global-emojify-mode)
  )


;; clipboard sharing
;; # # # # # # # # # # #
;; enable save to clipboard
(setq x-select-enable-clipboard t)


;; # # # # # # # # # # #
;; Fixes cut/paste in Ansi-Terminal and other places
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)


;; persistant undo history
(use-package undo-tree :ensure t
  :config
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))) 
  (global-undo-tree-mode))


;; Evil Vim & Plugins
;; # # # # # # # # # # #
(setq evil-want-keybinding nil)
(setq evil-want-fine-undo t)
(setq evil-undo-system 'undo-tree)
(use-package evil :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :diminish evil-mode
  :config
  (evil-mode 1))
(use-package evil-matchit :ensure t)
(defun surround-drawer ()
  (let ((dname (read-from-minibuffer "" "")))
    (cons (format ":%s:" (upcase (or dname ""))) ":END:")))
(defun surround-code ()
  (let ((dname (read-from-minibuffer "" "")))
    (cons (format "#+BEGIN_SRC %s" (or dname "")) "#+END_SRC")))
(use-package evil-surround :ensure t
  :diminish evil-surround-mode
  :config
  (add-to-list 'evil-surround-pairs-alist '(?: . surround-drawer))
  (add-to-list 'evil-surround-pairs-alist '(?# . surround-code))
  (global-evil-surround-mode 1))
(use-package evil-tutor :ensure t
  :config
  (global-evil-matchit-mode 1))
(use-package evil-commentary :ensure t
  :diminish evil-commentary-mode
  :config
  (evil-commentary-mode 1))
(define-key evil-normal-state-map (kbd "C-v") 'clipboard-yank)
;; browse in emacs mode
(add-hook 'eww-mode-hook
          (lambda ()
            (evil-set-initial-state 'eww-mode 'emacs)))
;; Helps prevent excess cpu during visual mode
(setq auto-window-vscroll nil)

;; More Vim-like
;; # # # # # # # # # # #
(evil-define-motion evil-last-non-blank (count)
  "Move the cursor to the last non-blank character
                    on the current line. If COUNT is given, move COUNT - 1
                    lines downward first."
  :type inclusive
  (evil-end-of-line count)
  (re-search-backward "^\\|[^[:space:]]")
  (setq evil-this-type (if (eolp) 'exclusive 'inclusive)))
(define-key evil-motion-state-map "g$" 'evil-end-of-line)
(define-key evil-motion-state-map "$" 'evil-last-non-blank)


;; Helm
;; # # # # # # # # # # #
(use-package helm :ensure t
  :diminish helm-mode
  :config
  (require 'helm-config)
  (setq helm-mini-default-sources '(helm-source-buffers-list
                                  helm-source-recentf
                                  helm-source-bookmarks
                                  helm-source-buffer-not-found))
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (add-hook 'helm-mode-hook
            (lambda ()
              ;; escape quits in Terminal work around
              (bind-key "<escape>" 'isearch-cancel isearch-mode-map)
              (bind-key "<escape>" 'helm-keyboard-quit helm-map)
              (bind-key "<escape>" 'helm-keyboard-quit helm-comp-read-map)
              ;; adds paste functionality to helm
              (define-key isearch-mode-map (kbd "C-v") 'clipboard-yank)
              (define-key helm-map (kbd "C-v") 'clipboard-yank)
              (define-key helm-comp-read-map (kbd "C-v") 'clipboard-yank)))
  (helm-mode 1))


;; Ivy / Swiper
;; # # # # # # # # # # #
(use-package swiper :ensure t)
(use-package ivy :ensure t
  :init
  (ivy-mode 1)
  :config
  (setq ivy-use-virtual-buffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume))


;; Autopair Mode
;; # # # # # # # # # # #
(use-package phi-autopair :ensure t
  :diminish phi-autopair-mode
  :config
  (phi-autopair-global-mode 1))


;; Icon Package
;; # # # # # # # # # # #
(use-package all-the-icons :ensure t
  :if (display-graphic-p)
  :config
  (propertize (all-the-icons-octicon "package")
            'face `(:family ,(all-the-icons-octicon-family) :height 1.2)
            'display '(raise -0.1)))
(use-package all-the-icons-completion :ensure t
  :if (display-graphic-p)
  :config
  (all-the-icons-completion-mode))
(use-package all-the-icons-dired :ensure t
  :if (display-graphic-p)
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))


;; Org Mode
;; # # # # # # # # # # #
;; Set Clock Format
(setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
;; Symmetric Inline Encryption
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
(setq org-crypt-key nil)
(setq auto-save-default nil)
;; Symmetric File Encryption
(require 'epa-file)
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
(epa-file-enable)

;; startup folded
(setq org-startup-folded t)
;;(setq epa-file-select-keys nil)
;; Theme Conventions for Org Mode
;; Hide emphasis marks
(setq org-hide-emphasis-markers t)
;; Add bullets for lists and convential clipboard access
(use-package org-bullets :ensure t
  :config
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode 1)
              (toggle-truncate-lines)
              (local-set-key (kbd "C-v") 'clipboard-yank)
              )))
;; Org Mode Timing Drawer
(setq org-clock-into-drawer t)
;; Org Mode Evil compatiblity workaround for terminal
(add-hook 'org-mode-hook
          (lambda ()
            (define-key evil-normal-state-map (kbd "C-h") 'org-metaleft)
            (define-key evil-normal-state-map (kbd "C-k") 'org-metaup)
            (define-key evil-normal-state-map (kbd "C-j") 'org-metadown)
            (define-key evil-normal-state-map (kbd "C-l") 'org-metaright)
            (define-key evil-normal-state-map "H" 'org-shiftleft)
            (define-key evil-normal-state-map "K" 'org-shiftup)
            (define-key evil-normal-state-map "J" 'org-shiftdown)
            (define-key evil-normal-state-map "L" 'org-shiftright)
            (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)))


;
;; Artist Mode
(evil-set-initial-state 'artist-mode 'emacs)
(defun toggle-artist-mode ()
  "Toggles artist mode"
  (interactive)
  (if (bound-and-true-p artist-mode)
      (artist-mode-off)
    (artist-mode)))
;; export to epub
(use-package ox-epub :ensure t)
;; better agenda view
(use-package helm-org-ql :ensure t)
(defun better-agenda-view ()
  "View All Agenda todo items plus past and current deadlines."
  (interactive)
  (org-ql-search (org-agenda-files)
      '(and (todo "EMERGENCY" "TODAY" "TODO" "WAITING"))))

;; Fix the terminal
;; # # # # # # # # # # #
(setq multi-term-program "/bin/bash")
(use-package multi-term :ensure t
  :config
  (add-hook 'term-mode-hook
            (lambda ()
              (evil-set-initial-state 'term-mode 'emacs)
              (setq term-buffer-maximum-size 25000)
              (setq show-trailing-whitespace nil)
              (prefer-coding-system 'utf-8)
              (phi-autopair-mode -1)
              (define-key term-raw-map (kbd "C-v") 'term-paste)
              (define-key term-raw-map (kbd "<prior>") 'scroll-down)
              (define-key term-raw-map (kbd "<next>") 'scroll-up)
              (define-key term-raw-map (kbd "<escape>") 'term-send-esc)
              (define-key term-raw-map (kbd "<delete>") 'term-send-backspace)
              (define-key term-raw-map (kbd "<backspace>") 'term-send-backspace))))
;; toggles line mode when flipping states
(add-hook 'evil-normal-state-entry-hook
          (lambda ()
            (if (eq major-mode 'term-mode)
                (term-line-mode))))
(add-hook 'evil-emacs-state-entry-hook
          (lambda ()
            (when (eq major-mode 'term-mode)
              (if (term-in-line-mode)
                  (condition-case nil
                      (term-char-mode)
                    (error nil))))))
(defun term-toggle-mode ()
  "Toggles term between line mode and char mode"
  (interactive)
  (if (term-in-line-mode)
      (term-char-mode)
    (term-line-mode)))
(use-package exec-path-from-shell :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))


;; Tramp
;; # # # # # # # # # # #
;; (setq tramp-default-method "ssh")
(use-package tramp :ensure t)


;; smooth scrolling
;; # # # # # # # # # # #
(pixel-scroll-mode 1)
(setq pixel-scroll-precision-large-scroll-height 40.0)
(setq pixel-scroll-precision-interpolation-factor 30)

;; aggressive indentation
;; # # # # # # # # # # #
(use-package aggressive-indent :ensure t
  :diminish aggressive-indent-mode)


;; Syntax
;; # # # # # # # # # # #
(setq web-mode-ac-sources-alist
      '(("css" . (ac-source-words-in-buffer ac-source-css-property))
        ("html" . (ac-source-words-in-buffer ac-source-abbrev))
        ("php" . (ac-source-words-in-buffer
                  ac-source-words-in-same-mode-buffers
                  ac-source-dictionary))))
(use-package web-mode :ensure t
  :diminish web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.htm[l]?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\'" . php-mode))
  (add-to-list 'auto-mode-alist '("\\.inc\\'" . php-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . php-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . css-mode))
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
  (add-to-list 'auto-mode-alist '("\\.toml\\'" . toml-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.coffee\\'" . coffee-mode))
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (local-set-key '[backtab] 'indent-relative)
              (rainbow-mode 1)
              (setq indent-tabs-mode nil)
              (setq web-mode-enable-auto-pairing t)
              (setq web-mode-enable-comment-interpolation t)
              (setq web-mode-enable-heredoc-fontification t)
              (setq web-mode-enable-current-element-highlight t)
              (setq web-mode-enable-current-column-highlight t)
              (setq web-mode-markup-indent-offset 2
                    web-mode-css-indent-offset 2
                    web-mode-code-indent-offset 2))))
(use-package php-mode :ensure t
  :diminish php-mode)
;;(defun php-syntax-propertize-function (start end)
;;  "This may break PHP syntax highlighting for increased performance.")
(use-package typescript-mode :ensure t
  :diminish typescript-mode)
(use-package sass-mode :ensure t
  :diminish sass-mode)
(use-package json-mode :ensure t
  :diminish json-mode)
(use-package toml-mode :ensure t
  :diminish toml-mode)
(use-package markdown-mode :ensure t
  :diminish markdown-mode)
(use-package yaml-mode :ensure t
  :diminish yaml-mode)
(use-package coffee-mode :ensure t
  :diminish coffee-mode)
(use-package go-mode :ensure t
  :diminish go-mode)
(use-package flycheck :ensure t
  :diminish flycheck-mode
  :config
  (setq flycheck-checker-error-threshold nil)
  (global-flycheck-mode)
  (flycheck-add-mode 'html-tidy 'web-mode)
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.15))))
(use-package flycheck-color-mode-line :ensure t)
(eval-after-load "flycheck"
  '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
(defun flycheck-list-errors-toggle ()
  "Toggle the error list for the current buffer."
  (interactive)
  (let ((flycheck-errors-window (get-buffer-window flycheck-error-list-buffer)))
    (if (not (window-live-p flycheck-errors-window))
        (call-interactively 'flycheck-list-errors)
      (delete-window flycheck-errors-window))))
;; Plantuml
;; http://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html
(use-package plantuml-mode :ensure t)
(use-package flycheck-plantuml :ensure t)
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
(setq org-plantuml-jar-path
      (expand-file-name "~/.yadrlite/src/org/contrib/scripts/plantuml.jar"))
; Show Matching Pairs
(show-paren-mode 1)
;; YASnippet
(use-package yasnippet :ensure t
  :diminish yas-minor-mode
  :config
  (yas-global-mode 1))
;; Toggle PHP/Web Mode
(defun toggle-php-flavor-mode ()
  "Toggle mode between PHP & Web-Mode Helper modes."
  (interactive)
  (cond ((string= mode-name "PHP/l")
         (web-mode))
        ((string= mode-name "Web")
         (php-mode))))
;; Web Beautify
(use-package web-beautify :ensure t)
(defun beautify-code ()
  "Beautify CSS, HTML or JS"
  (interactive)
  (cond
   ((eq major-mode 'js-mode) (web-beautify-js))
   ((eq major-mode 'json-mode) (web-beautify-js))
   ((eq major-mode 'sgml-mode) (web-beautify-html))
   ((eq major-mode 'web-mode) (web-beautify-html))
   ((eq major-mode 'xah-css-mode) (web-beautify-css))
   ((eq major-mode 'css-mode) (web-beautify-css))
   ((eq major-mode 'scss-mode) (web-beautify-css))
   ((indent-region (point-min) (point-max)))))

;; Fix page numbers in table of contents for Orgmode exports
(setq
 org-latex-pdf-process
 '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

;; Use LuaLatex instead of default
(setq org-latex-pdf-process
      '("lualatex -shell-escape -interaction nonstopmode %f"
        "lualatex -shell-escape -interaction nonstopmode %f"))


;; Help Mode
;; # # # # # # # # # # #
(use-package which-key :ensure t
  :diminish which-key-mode
  :config
  (set-face-attribute 'which-key-key-face nil :foreground "#83a598")
  (which-key-mode 1))


;; Git Gutter Fringe
;; # # # # # # # # # # #
(use-package fringe-helper :ensure t)
(use-package git-gutter :ensure t
  :diminish git-gutter-mode
  :config
  (global-git-gutter-mode +1))
(if window-system (use-package git-gutter-fringe :ensure t))


;; Gruvbox Theme
;; # # # # # # # # # # #
(use-package gruvbox-theme :ensure t
  :config
  (setq active-theme 'gruvbox-dark-medium)
  (load-theme active-theme t))
(defun toggle-light-dark-theme ()
  "Toggle Light and Dark themes"
  (interactive)
  (if (eq active-theme 'gruvbox-light-medium)
      (setq active-theme 'gruvbox-dark-medium)
    (setq active-theme 'gruvbox-light-medium))
  (load-theme active-theme t)
  (gruvbox-modeline-reset)
  (powerline-reset))
(defun gruvbox-modeline-reset ()
  "Dark Mode Line"
  (if (eq active-theme 'gruvbox-light-medium)
      (progn
        (set-face-attribute 'mode-line nil
                            :foreground "#282828"
                            :background "#bdae93")
        (set-face-attribute 'mode-line-inactive nil
                            :foreground "#928374"
                            :background "#fbf1c7")
        (set-face-attribute 'powerline-active1 nil
                            :foreground "#ebdbb2"
                            :background "#928374")
        (set-face-attribute 'powerline-active2 nil
                            :foreground "#3c3836"
                            :background "#d5c4a1")
        (set-face-attribute 'powerline-inactive1 nil
                            :foreground "#928374"
                            :background "#ebdbb2")
        (set-face-attribute 'powerline-inactive2 nil
                            :foreground "#928374"
                            :background "#fbf1c7:"))
    (progn
      (set-face-attribute 'mode-line nil
                          :foreground "#ebdbb2"
                          :background "#504945")
      (set-face-attribute 'mode-line-inactive nil
                          :foreground "#bdae93"
                          :background "#282828")
      (set-face-attribute 'powerline-active1 nil
                          :foreground "#ebdbb2"
                          :background "#928374")
      (set-face-attribute 'powerline-active2 nil
                          :foreground "#bdae93"
                          :background "#3c3836")
      (set-face-attribute 'powerline-inactive1 nil
                          :foreground "#bdae93"
                          :background "#282828")
      (set-face-attribute 'powerline-inactive2 nil
                          :foreground "#bdae93"
                          :background "#1d2021"))))


;; Misc Helm Packages and Dependencies
;; # # # # # # # # # # #
(use-package helm-swoop :ensure t)
(use-package helm-tramp :ensure t)


;; Spruce Up line numbers
;; # # # # # # # # # # #
(defun my-display-numbers-hook ()
  (display-line-numbers-mode t)
  )
(add-hook 'prog-mode-hook 'my-display-numbers-hook)

;; Add relative line numbering option
(use-package linum-relative :ensure t
  :diminish linum-relative-mode)


;; Ace Jump Mode (a very nice Easy Motion alternative)
;; # # # # # # # # # # #
(use-package ace-jump-mode :ensure t :diminish ace-jump-mode)


;; Spell Check
;; # # # # # # # # # # #
(use-package auto-dictionary :ensure t
  :config
  (add-hook 'flyspell-mode-hook
            (lambda ()
              (auto-dictionary-mode 1))))
(use-package flyspell-correct :ensure t
  :after flyspell)

(use-package flyspell-correct-helm :ensure t
  :after flyspell-correct)


;; Dictionary / Thesaurus
;; # # # # # # # # # # #
(use-package powerthesaurus :ensure t)


;; Battery Update
(use-package fancy-battery :ensure t
  :config
  (fancy-battery-mode 1))


;; Smart Mode Line
;; # # # # # # # # # # #
(if (not (window-system))
    (use-package evil-terminal-cursor-changer :ensure t
      :config
      (evil-terminal-cursor-changer-activate)))

(use-package spaceline :ensure t
  :config
  (setq evil-normal-state-cursor '(box "#bdae93")
        evil-insert-state-cursor '((bar . 3) "#83a598")
        evil-visual-state-cursor '(box "#fabd2f")
        evil-motion-state-cursor '(box "#d3869b")
        evil-replace-state-cursor '(box "#cc241d")
        evil-operator-state-cursor '(box "#b8bb26")
        evil-emacs-state-cursor '(box "#098B9F"))
  (setq powerline-default-separator 'wave)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (setq evil-emacs-state-tag "EMACS")
  (setq evil-insert-state-tag "INSERT")
  (setq evil-motion-state-tag "MOTION")
  (setq evil-normal-state-tag "NORMAL")
  (setq evil-replace-state-tag "REPLACE")
  (setq evil-visual-state-tag "VISUAL")
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (spaceline-toggle-minor-modes-off)
  (spaceline-toggle-hud-off)
  (set-face-attribute 'spaceline-evil-emacs nil :background "#098B9F")
  (set-face-attribute 'spaceline-evil-insert nil :background "#83a598")
  (set-face-attribute 'spaceline-evil-motion nil :background "#d3869b")
  (set-face-attribute 'spaceline-evil-normal nil :background "#bdae93")
  (set-face-attribute 'spaceline-evil-replace nil :background "#cc241d")
  (set-face-attribute 'spaceline-evil-visual nil :background "#fabd2f")
  (gruvbox-modeline-reset)
  (powerline-reset))


;; Projectile (better than ctrlp)
;; # # # # # # # # # # #
;; uncomment next line for MacOS
;; (setq projectile-indexing-method 'git)
(use-package projectile :ensure t
  :diminish projectile-mode
  :config
  (projectile-global-mode))
(use-package helm-projectile :ensure t
  :config
  (helm-projectile-on))
(use-package helm-ag :ensure t
  :config
  (custom-set-variables
   ;;bug in ag not on first search
   ;;'(helm-ag-base-command "ag --nocolor --nogroup")))
   '(helm-ag-base-command "ack --nocolor --nogroup")))


; image display compatibility
; (setq image-use-external-converter 'convert)

; Dashboard
; # # # # # # # # # # #
(use-package page-break-lines :ensure t
      :diminish page-break-lines-mode)
(setq dashboard-week-agenda t)
(use-package dashboard :ensure t
  :config
    (setq dashboard-startup-banner 'official)
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-init-info t)
    (setq initial-buffer-choice (lambda() (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to YADRLite")
    (setq dashboard-items '((recents   . 10)
              (bookmarks . 5)
              (projects  . 10)
              ; (agenda    . 10)
              ; (registers . 5)
              ))
    (dashboard-modify-heading-icons '((bookmarks . "book")))
    (dashboard-setup-startup-hook))

(defun call-dashboard nil
  "Jump to the dashboard buffer, if doesn't exists create one."
  (interactive)
  (dashboard-refresh-buffer)
  (switch-to-buffer dashboard-buffer-name)
  (dashboard-mode)
  (dashboard-insert-startupify-lists))


;; Refresh Buffer
;; # # # # # # # # # # #
(defun revert-buffer-no-confirm nil
  "Revert buffer without confirmation."
  (interactive)
  (revert-buffer :ignore-auto :noconfirm))


;; Magit a Git handler
;; # # # # # # # # # # #
(use-package magit :ensure t
  :diminish magit-mode)
;; helm-ls-git
(use-package helm-ls-git :ensure t)
;; (use-package evil-magit :ensure t)


;; w3m browser
(use-package w3m :ensure t)


;; mu4e setup
(if (file-exists-p "/usr/local/share/emacs/site-lisp/mu4e")
    (progn
     (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
     (require 'mu4e-config)
     (require 'mu4e)
     (use-package helm-mu :ensure t)
     (with-eval-after-load "emojify"
       (delete 'mu4e-headers-mode emojify-inhibit-major-modes))

    ;; mu4e setup
    ;; setup
    ; cd ~/.emacs.d
    ; echo 'password' > .mbsyncpass
    ; gpg2 --output .mbsyncpass.gpg --symmetric .mbsyncpass
    ; rm .mbsyncpass
    ; cd ~/
    ; echo "machine smtp.example.com login myname port 587 password mypassword" > .authinfo
    ; gpg2 --output ~/.authinfo.gpg --symmetric ~/.authinfo
    ; rm ~/.authinfo
    ; vi ~/.emacs.d/.mbsyncrc

    ; CopyArrivalDate yes
    ; Sync Pull
    ; Create Near
    ; Remove Near
    ; Expunge Near

    ; IMAPAccount nameaccount
    ; Host your.imap.server
    ; User yourname
    ; PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.emacs.d/.mbsyncpass.gpg"
    ; Port 993
    ; SSLType IMAPS
    ; AuthMechs *
    ; CertificateFile /etc/ssl/certs/ca-certficates.crt
    ;
    ; IMAPStore nameaccount-remote
    ; Account nameaccount
    ;
    ; MaildirStore nameaccount-local
    ; Path ~/email/mbsyncmail/
    ; INBOX ~/email/mbsyncmail/INBOX
    ; SubFolders Verbatim
    ;
    ; Channel nameaccount
    ; Far :nameaccount-remote:
    ; Near :nameaccount-local:
    ; Patterns *
    ; SyncState *

    ; mkdir -p ~/email/mbsyncmail/INBOX
    ; mbsync --config ~/.emacs.d/.mbsyncrc nameaccount
    ; mu init --my-address="your@email.com" --maildir=/home/USERNAME/email/mbsyncmail/
    ; mu index

    ;; use mu4e for e-mail in emacs
    (setq mail-user-agent 'mu4e-user-agent)

    ;; default settings
    (setq mu4e-sent-folder "/Sent"
          mu4e-drafts-folder "/Drafts"
          mu4e-trash-folder  "/Junk"
          user-mail-address "your-name@your-dmoain.com"
          user-full-name "Your Name"
          smtpmail-default-smtp-server "mail.your-domain.com"
          smtpmail-smtp-server "mail.your-domain.com"
          smtpmail-local-domain "your-domain.com"
          smtpmail-sendto-domain "your-domain.com"
          smtpmail-stream-type 'ssl
          smtpmail-smtp-service 465)

    ;; fixes duplicate UID errors
    (setq mu4e-change-filenames-when-moving t)

    ;; allow for updating mail using 'U' in the main view:
    (setq mu4e-get-mail-command "offlineimap")

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)

    ;; The command used to get your emails (adapt this line, see section 2.3):
    (setq mu4e-get-mail-command "mbsync --config ~/.emacs.d/.mbsyncrc nameaccount")

    ;; Further customization:
    (setq mu4e-html2text-command "w3m -T text/html" ; html render
            mu4e-update-interval 300                  ; seconds between each mail retrieval
            mu4e-headers-auto-update t                ; avoid to type `g' to update
            mu4e-use-fancy-chars t
            mu4e-view-show-images t                   ; show images in the view buffer
            mu4e-compose-signature-auto-include nil   ; I don't want a message signature
            mu4e-use-fancy-chars nil)                 ; allow fancy icons for mail threads

    ;; prettier mu4e
    (setq browse-url-browser-function 'browse-url-default-browser)
    (setq
    message-signature-file nil
    mu4e-attachment-dir "~/Downloads"
    mu4e-compose-signature-auto-include t
    mu4e-headers-date-format "%e-%b"
    mu4e-headers-include-related t
    mu4e-headers-time-format "%k:%M"
    mu4e-headers-skip-duplicates t
    mu4e-headers-draft-mark     '("D" . "🚧 ")
    mu4e-headers-flagged-mark   '("F" . "🚩 ")
    mu4e-headers-new-mark       '("N" . "✨ ")
    mu4e-headers-passed-mark    '("P" . "📨 ")
    mu4e-headers-replied-mark   '("R" . " ")
    mu4e-headers-seen-mark      '("S" . "✔ ")
    mu4e-headers-trashed-mark   '("T" . "💀 ")
    mu4e-headers-attach-mark    '("a" . "📎 ")
    mu4e-headers-encrypted-mark '("x" . "🔑 ")
    mu4e-headers-signed-mark    '("s" . "🖊 ")
    mu4e-headers-unread-mark    '("u" . "📩 ")
    mu4e-headers-list-mark      '("s" . "📰 ")
    mu4e-headers-personal-mark  '("p" . " ")
    mu4e-headers-calendar-mark  '("c" . "📆 ")
    mu4e-headers-visible-lines 10
    mu4e-view-auto-mark-as-read nil
    mu4e-enable-async-operations t
    mu4e-enable-notifications t
    mu4e-use-fancy-chars t
    mu4e-enable-mode-line t
    mu4e-headers-fields '(
                    (:flags . 6)
                    (:human-date . 12)
                    (:from . 24)
                    (:subject))
    mu4e-view-fields '(:subject :from :to :cc :date
                    :tags :attachments
                    :signature :decryption
                    :mailing-list :message-id))


    ;;; mu4e-view-save-all-attachments.el -- Save all attachments from view mode.
    ;;; Stephen J Eglen 2021


    ;; I've created this based on the work of Phil Jackson that required
    ;; an older version of mu4e.  This version requires the GNUS article
    ;; code for reading mu4e messages.
    ;; https://gist.github.com/philjackson/aecfab1706f05079aec7000e328fd183

    ;; Suggested keybinding
    ;;  mnemnonic: > is to redirect the files to output everything.
    ;; (define-key mu4e-view-mode-map ">" 'mu4e-view-save-all-attachments)

    (defvar bulk-saved-attachments-dir mu4e-attachment-dir)

    (defun cleanse-subject (sub)
        (replace-regexp-in-string
        "[^A-Z0-9]+"
        "-"
        (downcase sub)))

    (defun mu4e-view-save-all-attachments (&optional arg)
        "Save all MIME parts from current mu4e gnus view buffer."
        ;; Copied from mu4e-view-save-attachments
        (interactive "P")
        (cl-assert (and (eq major-mode 'mu4e-view-mode)
                        (derived-mode-p 'gnus-article-mode)))
        (let* ((msg (mu4e-message-at-point))
            (id (cleanse-subject (mu4e-message-field msg :subject)))
            (attachdir (concat bulk-saved-attachments-dir "/" id))
        (parts (mu4e~view-gather-mime-parts))
            (handles '())
            (files '())
            dir)
        (mkdir attachdir t)
        (dolist (part parts)
            (let ((fname (or
            (cdr (assoc 'filename (assoc "attachment" (cdr part))))
                        (seq-find #'stringp
                                    (mapcar (lambda (item) (cdr (assoc 'name item)))
                                            (seq-filter 'listp (cdr part)))))))
            (when fname
                (push `(,fname . ,(cdr part)) handles)
                (push fname files))))
        (if files
            (progn
                (setq dir
        (if arg (read-directory-name "Save to directory: ")
            attachdir))
                (cl-loop for (f . h) in handles
                        when (member f files)
                        do (mm-save-part-to-file h
                    (sje-next-free
                    (expand-file-name f dir)))))
            (mu4e-message "No attached files found"))))

    (defun sje-next-free (file)
        "Return name of next unique 'free' FILE.
    If /tmp/foo.txt and /tmp/foo-1.txt exist, when this is called
    with /tmp/foo.txt, return /tmp/foo-2.txt.  See
    `sje-test-next-free' for a test case.  This is not very efficient
    if there are a large number of files already in the directory
    with the same base name, as it simply starts searching from 1
    each time until it finds a gap.  An alternative might be to do a
    wildcard search for all the filenames, extract the highest number
    and then increment it."
        ;; base case is easy; does file exist already?
        (if (not  (file-exists-p file))
            file
        ;; othwerwise need to iterate through f-1.pdf
        ;; f-2.pdf, f-3.pdf ... until we no longer find a file.
        (let ((prefix (file-name-sans-extension file))
        (suffix (file-name-extension file))
        (looking t)
        (n 0)
        (f)
        )
            (while looking
        (setq n (1+ n))
        (setq f (concat prefix "-" (number-to-string n) "." suffix))
        (setq looking (file-exists-p f)))
            f
            )))


    (defun sje-test-next-free ()
        (let (f)
        (dotimes (i 100)
            (setq f (sje-next-free "/tmp/rabbit.txt"))
            (write-region "hello" nil f)
            )))
    ;; (sje-test-next-free)
    (add-hook 'mu4e-view-mode-hook
                (lambda ()
                (add-to-list 'mu4e-view-actions '("Download All Attachments" . mu4e-view-save-all-attachments) t)))



    ;;; mu4e-view-save-all-attachments.el -- Save all attachments from view mode.
    ;;; Stephen J Eglen 2021

    ;; I've created this based on the work of Phil Jackson that required
    ;; an older version of mu4e.  This version requires the GNUS article
    ;; code for reading mu4e messages.
    ;; https://gist.github.com/philjackson/aecfab1706f05079aec7000e328fd183

    ;; Suggested keybinding
    ;;  mnemnonic: > is to redirect the files to output everything.
    ;; (define-key mu4e-view-mode-map ">" 'mu4e-view-save-all-attachments)

    (defvar bulk-saved-attachments-dir mu4e-attachment-dir)


    (defun cleanse-subject (sub)
    (replace-regexp-in-string
    "[^A-Z0-9]+"
    "-"
    (downcase sub)))

    (defun mu4e-view-save-all-attachments (&optional arg)
    "Save all MIME parts from current mu4e gnus view buffer."
    ;; Copied from mu4e-view-save-attachments
    (interactive "P")
    (cl-assert (and (eq major-mode 'mu4e-view-mode)
                    (derived-mode-p 'gnus-article-mode)))
    (let* ((msg (mu4e-message-at-point))
            (id (cleanse-subject (mu4e-message-field msg :subject)))
            (attachdir (concat bulk-saved-attachments-dir "/" id))
        (parts (mu4e~view-gather-mime-parts))
            (handles '())
            (files '())
            dir)
        (mkdir attachdir t)
        (dolist (part parts)
        (let ((fname (or
                (cdr (assoc 'filename (assoc "attachment" (cdr part))))
                        (seq-find #'stringp
                                (mapcar (lambda (item) (cdr (assoc 'name item)))
                                        (seq-filter 'listp (cdr part)))))))
            (when fname
            (push `(,fname . ,(cdr part)) handles)
            (push fname files))))
        (if files
            (progn
            (setq dir
            (if arg (read-directory-name "Save to directory: ")
            attachdir))
            (cl-loop for (f . h) in handles
                    when (member f files)
                    do (mm-save-part-to-file h
                            (sje-next-free
                            (expand-file-name f dir)))))
        (mu4e-message "No attached files found"))))



    (defun sje-next-free (file)
    "Return name of next unique 'free' FILE.
    If /tmp/foo.txt and /tmp/foo-1.txt exist, when this is called
    with /tmp/foo.txt, return /tmp/foo-2.txt.  See
    `sje-test-next-free' for a test case.  This is not very efficient
    if there are a large number of files already in the directory
    with the same base name, as it simply starts searching from 1
    each time until it finds a gap.  An alternative might be to do a
    wildcard search for all the filenames, extract the highest number
    and then increment it."
    ;; base case is easy; does file exist already?
    (if (not  (file-exists-p file))
        file
        ;; othwerwise need to iterate through f-1.pdf
        ;; f-2.pdf, f-3.pdf ... until we no longer find a file.
        (let ((prefix (file-name-sans-extension file))
        (suffix (file-name-extension file))
        (looking t)
        (n 0)
        (f)
        )
        (while looking
        (setq n (1+ n))
        (setq f (concat prefix "-" (number-to-string n) "." suffix))
        (setq looking (file-exists-p f)))
        f
        )))


    (defun sje-test-next-free ()
    (let (f)
        (dotimes (i 100)
        (setq f (sje-next-free "/tmp/rabbit.txt"))
        (write-region "hello" nil f)
        )))
    ;; (sje-test-next-free)
    ;; (add-to-list 'mu4e-view-actions '("Download All Attachments" . mu4e-view-save-all-attachments) t)

  )) ;; end of Mu4e configuration


;; Auto Completion with Company
;; uncomment to use Company autocompletion
(setq lsp-intelephense-licence-key (expand-file-name "~/.config/intelephense/licence.txt"))
(use-package company
 :ensure t
 :config
 (setq company-idle-delay 0.3)
 (global-company-mode 1)
 (global-set-key (kbd "C-<tab>") 'company-complete))
(use-package flycheck :ensure t)
(use-package lsp-mode
  :ensure t
  :init (add-to-list 'company-backends 'company-capf)
  :config
    (setq read-process-output-max (* 1024 1024))
    (setq lsp-idle-delay 0.500)
    (setq lsp-log-io nil)
    (setq lsp-prefer-flymake t)
    (setq lsp-enable-file-watchers t)
    (setq lsp-file-watch-threshold nil)
    (setq lsp-modeline-code-actions-mode t)
    (setq lsp-warn-no-matched-clients nil)
    (setq lsp-modeline-diagnostics-scope :workspace)
    (advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))
  :hook ((php-mode . lsp)
    (sass-mode . lsp)
    (css-mode . lsp)
    (typescript-mode . lsp)
    (web-mode . lsp)
    (toml-mode . lsp)
    (text-mode . lsp)
    (json-mode . lsp)
    (yaml-mode . lsp)
    (go-mode . lsp)
    (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)
(use-package lsp-ui
 :ensure t
 :requires lsp-mode flycheck
 :config
 (setq lsp-ui-doc-enable t
 lsp-ui-doc-use-childframe t
 lsp-ui-doc-position 'top
 lsp-ui-doc-include-signature t
 lsp-ui-sideline-enable nil
 lsp-ui-flycheck-enable t
 lsp-ui-flycheck-list-position 'right
 lsp-ui-flycheck-live-reporting t
 lsp-ui-peek-enable t
 lsp-ui-peek-list-width 60
 lsp-ui-peek-peek-height 25
 lsp-ui-sideline-enable nil)
 (add-hook 'lsp-mode-hook 'lsp-ui-mode))
(use-package lsp-treemacs
  :ensure t
  :config
  (setq lsp-treemacs-sync-mode 1))
(use-package helm-lsp :ensure t)


;; Grammarly
(use-package lsp-grammarly
  :ensure t
  :init
  (setq lsp-grammarly-active-modes '(mu4e-compose-mode text-mode latex-mode org-mode markdown-mode))
  :hook (org-mode . (lambda ()
                       (require 'lsp-grammarly)
                       (lsp))))

;; Scratch
(use-package scratch
 :ensure t
 :diminish scratch-mode)


;; dap mode for php and Xdebug
(use-package dash :ensure t)
(use-package dap-mode
 :ensure t
 :after lsp-mode
 :commands dap-debug
 :hook ((python-mode . dap-ui-mode)
        (python-mode . dap-mode))
 :diminish dap-mode
 :config
 (eval-when-compile
    (require 'cl-lib))
 (setq dap-auto-configure-features '(locals controls tooltip))
 (setq dap-ui-variable-length 10000)
 (require 'dap-php)
 (require 'dap-python)
 (require 'dap-lldb)
 (defun dap-python--pyenv-executable-find (command)
    (with-venv (executable-find "python")))
 )

;; complete dap termination
(defun terminate-dap-mode nil
  "This provides additional functionality to terminate dap-mode completely"
  (interactive)
  (progn
    (dap-delete-all-sessions)
    (dap-mode 0)
    (kill-matching-buffers ".*launch\.j.*" t t)))


;; neotree
(use-package neotree
 :ensure t
 :config
 (add-hook
 'neotree-mode-hook
 (lambda ()
   (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter-hide))))
(defun neo-open-file-hide (full-path &optional arg)
  "Open a file node and hides tree."
  (neo-global--select-mru-window arg)
  (find-file full-path)
  (neotree-hide))
(defun neotree-enter-hide (&optional arg)
  "Enters file and hides neotree directly"
  (interactive "P")
  (neo-buffer--execute arg 'neo-open-file-hide 'neo-open-dir))
(setq
 neo-cwd-line-style 'text
 neo-fit-to-contents t
 neo-show-hidden-files t
 neo-smart-open t
 neo-theme 'classic
 neo-vc-integration '(face)
 neo-window-position 'left
 neo-window-width 50
)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
(setq neo-smart-open t)

;; Evil Collection
(use-package evil-collection
  :after (evil helm)
  :ensure t
  :config
  (setq evil-collection-setup-minibuffer t)
  (evil-collection-init))

;; misc functions and overrides
(defun kill-this-buffer nil  ; for the menu bar
  "Force kill the current buffer."
  (interactive)
   (kill-buffer (current-buffer))
   )

(defun package-reinstall-all-activated-packages ()
  "Refresh and reinstall all activated packages."
  (interactive)
  (byte-recompile-directory package-user-dir nil 'force))

(defun fix-short-open-tags nil
  "Replaces all Short Open Tags in a projects PHP code"
  (interactive)
  (progn
    (shell-command "find . \\( -type d -name .git -prune \\) -o -type f -iname \"*.php\" -print0 | xargs -0 -I{} sed -i -r 's/(<\\?)([^a-zA-Z=]|$)/\\1php \\2/g' '{}'")
    (shell-command "find . \\( -type d -name .git -prune \\) -o -type f -iname \"*.css\" -print0 | xargs -0 -I{} sed -i -r 's/(<\\?)([^a-zA-Z=]|$)/\\1php \\2/g' '{}'")
    (shell-command "find . \\( -type d -name .git -prune \\) -o -type f -iname \"*.js\" -print0 | xargs -0 -I{} sed -i -r 's/(<\\?)([^a-zA-Z=]|$)/\\1php \\2/g' '{}'")
    (shell-command "find . \\( -type d -name .git -prune \\) -o -type f -iname \"*.tpl\" -print0 | xargs -0 -I{} sed -i -r 's/(<\\?)([^a-zA-Z=]|$)/\\1php \\2/g' '{}'")
    ))

;; leader key operation
;; # # # # # # # # # # #
(setq gleader ",")
(setq gleader-non "C-,")
(use-package general :ensure t
  :config
  (general-evil-setup)
  (general-override-mode)

  ;; Single Key Functions (YADR Remnants)
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "," '(helm-M-x :which-key "Search for Command")
   ";" '(evil-commentary :which-key "Un/Comment")
   "[" '(shrink-window-horizontally :which-key "Contract Window")
   "]" '(enlarge-window-horizontally :which-key "Expand Window")
   "-" '(shrink-window :which-key "Shrink Window")
   "=" '(enlarge-window :which-key "Grow Window")
   "e" '(flycheck-list-errors-toggle :which-key "Error List")
   "h" '(call-dashboard :which-key "Dashboard")
   "j" '(ace-jump-char-mode :which-key "Jump to Character")
   "m" '(deer :which-key "Browse Current Directory")
   "n" '(neotree-toggle :which-key "Browse Project Directory")
   "q" '(kill-this-buffer :which-key "Quit Buffer")
   "Q" '(save-buffers-kill-emacs :which-key "Quit Emacs")
   "x" '(next-buffer :which-key "Next Buffer")
   "z" '(previous-buffer :which-key "Previous Buffer")
   "U" '(package-reinstall-all-activated-packages :which-key "Update All Packages")
   "/" '(helm-do-ag-project-root :which-key "Search in Project"))


   ;; Applicaitons
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "a"  '(nil :which-key "Applications")
   "ah" '(info-emacs-manual :which-key "Read the Emacs Manual")
   "ai" '(erc :which-key "IRC")
   "at" '(multi-term :which-key "Terminal")
   "am" '(mu4e :which-key "Email")
   "aw" '(w3m-browse-url :which-key "Browse Web"))


   ;; Buffer Functions
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "b"  '(nil :which-key "Buffers")
   "bb" '(helm-mini :which-key "List/Create Buffers")
   "bc" '(my-put-file-name-on-clipboard :which-key "Copy File Path")
   "bf" '(helm-find-files :which-key "Open File")
   "bn" '(evil-buffer-new :which-key "Create New Buffer")
   "bp" '(helm-projectile-find-file :which-key "Find File")
   "bq" '(kill-this-buffer :which-key "Quit Buffer")
   "br" '(revert-buffer-no-confirm :which-key "Refresh Buffer")
   "bs" '(save-buffer :which-key "Save Buffer"))


   ;; Geben Functions
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "d"  '(nil :which-key "Dap-Mode (DBGp)")
   "da" '(dap-breakpoint-delete-all :which-key "Delete all Breakpoints")
   "db" '(dap-breakpoint-toggle :which-key "Toggle Breakpoint")
   "dc" '(dap-continue :which-key "Continue to Breakpoint")
   "dd" '(dap-debug :which-key "Start Dap-Mode")
   "di" '(dap-step-in :which-key "Step into")
   "dl" '(dap-ui-breakpoints :which-key "List all Breakpoints")
   "dn" '(dap-next :which-key "Next Line")
   "do" '(dap-step-out :which-key "Step out")
   "dp" '(dap-php-setup :which-key "Install vscode-php-debug plugin")
   "dv" '(dap-ui-locals :which-key "View Context")
   "dx" '(terminate-dap-mode :which-key "Stop Dap-Mode"))


   ;; LSP Mode Navigation
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "f"  '(nil :which-key "Find")
   "fd" '(lsp-find-definition :which-key "Find Definition")
   "fD" '(projectile-find-file-in-directory :which-key "Find in Directory")
   "ff" '(helm-resume :which-key "Resume Last Find")
   "fi" '(lsp-find-implementation :which-key "Find Implementation")
   "fm" '(lsp-ui-imenu :which-key "Menu")
   "fp" '(helm-projectile-find-file :which-key "Projectile: Find File")
   "fr" '(lsp-find-references :which-key "Find Reference")
   "fs" '(lsp-ui-doc-show :which-key "Show Documentation"))


  ;; Word Functions
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "g"  '(nil :which-key "Grammer")
   "ga" '(powerthesaurus-lookup-antonyms-dwim :which-key "See Antonyms")
   "ge" '(emojify-insert-emoji :which-key "Insert Emoji")
   "gi" '(all-the-icons-insert :which-key "Insert Icon")
   "gs" '(flyspell-mode :which-key "View Spelling Errors")
   "gc" '(flyspell-auto-correct-word :which-key "Correct Spelling")
   "gd" '(powerthesaurus-lookup-definitions-dwim :which-key "See Definition")
   "gr" '(powerthesaurus-lookup-related-dwim :which-key "See Related Words")
   "gt" '(powerthesaurus-lookup-synonyms-dwim :which-key "See Synonyms")
   )


  ;; Line Functions
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "l"  '(nil :which-key "Line Manipulation")
   "la" '(toggle-artist-mode :which-key "Draw With Cursor [Emacs Mode]")
   "lb" '(beautify-code :which-key "Beautify Code")
   "lc" '(rainbow-mode :which-key "Toggle Color Codes")
   "le" '(epa-encrypt-region :which-key "Encrypt Selection")
   "ld" '(epa-decrypt-region :which-key "Decrypt Selection")
   "li" '(agressive-indent-mode :which-key "Toggle Aggressive Indenting")
   "ln" '(display-line-numbers-mode :which-key "View Line Numbers")
   "lm" '(term-toggle-mode :which-key "(Terminal Only) Toggle Line/Character Mode")
   "lr" '(linum-relative-toggle :which-key "Toggle Relative Numbers")
   "ls" '(delete-trailing-whitespace :which-key "Delete Trailing Whitespaces")
   "lt" '(toggle-php-flavor-mode :which-key "Toggle PHP/Web Mode Highlighting")
   "lw" '(toggle-truncate-lines :which-key "Toggle Line Wrapping"))


  ;; Org Mode Controls
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "o"  '(nil :which-key "Org-Mode")
   "oo" '(org-agenda :which-key "Agenda Controls")
   "oa" '(org-ctrl-c-ctrl-c :which-key "Activate (C-c)")
   "od" '(org-deadline :which-key "Schedule Deadline")
   "oc" '(org-evaluate-time-range :which-key "Recompute Clock")
   "ok" '(org-schedule :which-key "Schedule Task")
   "og" '(org-set-tags-command :which-key "Set Tag")
   "ol" '(org-clock-display :which-key "Display Clocks")
   "oj" '(org-clock-goto :which-key "Jump to Running Task")
   "ot" '(org-clock-in :which-key "Start Task")
   "or" '(better-agenda-view :which-key "Agenda Report")
   "os" '(org-clock-out :which-key "Stop Task")
   "ox" '(org-clock-cancel :which-key "Cancel Clock"))


  ;; Project Functions
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "p"  '(nil :which-key "Projects")
   "p]" '(git-gutter:previous-hunk :which-key "Go to previous modification")
   "p[" '(git-gutter:next-hunk :which-key "Go to next modification")
   "pd" '(helm-do-grep-ag :which-key "Search in Directory")
   "ph" '(magit-log-buffer-file :which-key "History of Buffer")
   "pf" '(helm-projectile-find-file :which-key "Fuzzy File (CtrlP)")
   "pP" '(helm-projectile :which-key "Open Recent Project")
   "pp" '(helm-resume :which-key "Helm Resume")
   "pr" '(helm-projectile-recentf :which-key "Open Recent Project File")
   "ps" '(helm-do-ag-project-root :which-key "Search in Project")
   "pm" '(magit-status :which-key "Git Status")
   "pw" '(helm-swoop :which-key "Helm Swoop"))


  ;; Lisp Debug Functions
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "s"  '(nil :which-key "Script")
   "sa" '(eval-last-sexp :which-key "Evaluate Statement")
   "sb" '(eval-buffer :which-key "Evaluate Buffer")
   "sc" '(eval-defun :which-key "Evaluate Function")
   "se" '(eval-print-last-sexp :which-key "Evaluate and Print Statement")
   "sf" '(debug-on-entry :which-key "Debug Function")
   "sl" '(load-file :which-key "load e-lisp file")
   "sp" '(emacs-lisp-byte-compile-and-load :which-key "load e-lisp file")
   "ss" '(scratch :which-key "Open Scratch Pad")
   "sv" '(debug-on-variable-change :which-key "Debug Variable")
   "sw" '(cancel-debug-on-variable-change :which-key "Cancel Variable Debugging")
   "sx" '(cancel-debug-on-entry :which-key "Cancel Function Debugging"))


  ;; Misc Toggles
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "t"  '(nil :which-key "Toggles")
   "tt" '(toggle-light-dark-theme :which-key "Toggle Dark/Light Theme"))


  ;; Window Functions
  (general-define-key
   :prefix gleader
   :non-normal-prefix gleader-non
   :states '(normal visual motion insert emacs)
   :keymaps 'override
   "w"  '(nil :which-key "Windows")
   "wb" '(balance-windows :which-key "All Windows Match Size")
   "wd" '(delete-window :which-key "Kill Window")
   "wc" '(delete-other-windows :which-key "Clear All but Currenet")
   "wf" '(toggle-frame-fullscreen :which-key "Toggle Full Screen")
   "wh" '(evil-window-left :which-key "Select Window Left")
   "wj" '(evil-window-down :which-key "Select Window Above")
   "wk" '(evil-window-up :which-key "Select Window Below")
   "wl" '(evil-window-right :which-key "Select Window Right")
   "wH" '(evil-window-move-far-left :which-key "Move Window Left")
   "wJ" '(evil-window-move-very-bottom :which-key "Move Window Up")
   "wK" '(evil-window-move-very-top :which-key "Move Window Down")
   "wL" '(evil-window-move-far-right :which-key "Move Window Right")
   "wn" '(other-frame :which-key "Switch Screens")
   "wo" '(other-window :which-key "Select Next Window")
   "wp" '(make-frame :which-key "Pop Out to Screen")
   "ws" '(split-window-below :which-key "Horizontal Split")
   "wv" '(split-window-right :which-key "Vertical Split")
   "wx" '(delete-frame :which-key "Close Screen"))


  )

;; Warning!  Any lines modified below this point may be overwritten.