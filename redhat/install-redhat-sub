#!/usr/bin/env bash
# This script is just a personal snapshot of my rhel workstation.
# subscription-manager repos --enable "codeready-builder-for-rhel-8-$(arch)-rpms"
# $SHELL install-redhat-sup <username>
# # # # # # # # # # # # # # #

# Options
# # # # # # # # # # # # # # #
USER="${1:francis}"
LOGFILE='/root/workstation-installation.log'

# Functions
# # # # # # # # # # # # # # #
function log {
    if [ -f "$LOGFILE" ]; then
        echo $1 >> $LOGFILE
    else
        echo $1 > $LOGFILE
    fi
}

function install {
    arr=("$@")
    _type=
    if [[ "$(declare -p arr)" =~ "declare -a" ]]; then
        for package in "${arr[@]}"; do
            if [[ $package == "package" ]]; then 
                _type=$package 
                continue
            fi
            if [[ $package == "group" ]]; then
                _type=$package
                continue
            fi
            if [[ $package == "module" ]]; then
                _type=$package
                continue
            fi
            cnt=3
            while [ $cnt -gt 0 ]; do
                if dnf list installed $package > /dev/null 2>&1; then
                    break;
                else
                    if [[ $_type == "group" ]]; then
                        dnf group install -y $package
                        break;
                    elif [[ $_type == "module" ]]; then
                        dnf module install -y $package
                        break;
                    else
                        dnf install -y $package
                    fi
                fi
                let "cnt-=1"
            done
            if ! dnf list installed $package > /dev/null 2>&1 && [[ $_type != "group" ]]; then
                log "There was a problem installing ${package}.  Please make sure this package exists."
            fi
        done
    else
        log "Warning! Passed variable is not an array".
    fi
}

# Run as root
# Enable Repos
# # # # # # # # # # # # # # #
log "Enable Repos"
dnf update -y
dnf upgrade -y
dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
dnf config-manager --add-repo https://copr.fedorainfracloud.org/coprs/flatcap/neomutt/repo/epel-8/flatcap-neomutt-epel-8.repo
dnf install -y https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm 
dnf install -y https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-8.noarch.rpm
dnf update

# Run as root
# Commandline Tools
# # # # # # # # # # # # # # #
log "installing commandline tools"
install group 'Development Tools'
install package git ack 'the_silver_searcher'
install package isync msmtp pass ctags-etags
install module nodejs python36 ruby
install module 'php:7.4'
install module 'perl:5.26'
install package yarn golang ruby-devel
npm install -g npm@latest
npm install -g grunt-cli coffeelint eslint csslint gulp typescript
$SHELL -c "`curl -fsSL https://raw.githubusercontent.com/bridgesense/dotfiles/master/setup`"
su -c '$SHELL -c "`curl -fsSL https://raw.githubusercontent.com/bridgesense/dotfiles/master/setup`"' $USER
su -c 'gem update' $USER

# install composer
# # # # # # # # # # # # # # #
curl https://getcomposer.org/composer-stable.phar >> /usr/local/bin/composer
chmod +x /usr/local/bin/composer

# install coding tools
install package freetype-devel fontconfig-devel libxcb-devel kitty tmux xclip
update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /bin/kitty 50
su -c "gsettings set org.gnome.desktop.default-applications.terminal exec kitty" $USER
su -c "makedir -p ~/lab" $USER
install package cmake
su -c 'git clone https://github.com/neovim/neovim.git ~/lab/nvim' $USER
cd /hom/$USER/lab/nvim
make CMAKE_BUILD_TYPE=RelWithDebInfo
make install && make clean
npm install -g neovim
install module container-tools
install package install -y neovim tmux
pip3 install ranger-fm
pip3 install pynvim
pip3 install neovim
su -c 'gem install neovim' $USER

# ueberzug plugin
install package platform-python-devel libX11-devel libXext-devel perl-Image-ExifTool
pip3 install ueberzug

# install supplementary packages
install package gnome-tweaks
install package NetworkManager-openvpn-gnome NetworkManager-openconnect-gnome
install package aspell-en 'texlive*'
install package clamav clamav-update
install package brasero
install pacakge youtube-dl
install package w3m w3m-img
install package ftp telnet
install package hplip hplip-gui simple-scan
install package lm-sensors
install package libcaca

# workaround for system tray bug
# open gnome tweak > Extensions > Kstatusnotifieritem/appindicator support
install package gnome-shell-extension-appindicator

# swap escape with caps lock
printf "\
Section \"InputClass\"\n\
        Identifier      \"system-keyboard\"\n\
        MatchIsKeyboard     \"on\"\n\
        Option          \"XkbLayout\" \"us\"\n\
        Option          \"XkbModel\"  \"pc104\"\n\
        Option          \"XkbOptions\" \"caps:swapescape\"\n\
EndSection\n\
" > /etc/X11/xorg.conf.d/00-keyboard.conf

# exfat
install package xfat-utils fuse-exfat

# Gnome Extensions
# Put Windows, used for quartering screens with hotkeys in gnome
# keybind fashion

# Unblank lock screen, only sure way to prevent computer from freezing
# when waking up a blank monitor.

# Keep awake!, quicker than digging into settings to keep screen awake

# compiles emacs 27
# for much better speed and compatibitily
# WARNING: emacs X11 will crash with pacakge: google-noto-emoji-color-fonts
# # # # # # # # # # # # # # #
log "compiling emacs 27"
install package gnutls-utils gtk3-devel gtk2-devel libXpm-devel libpng-devel giflib-devel libtiff-devel libjpeg-devel ncurses-devel gpm-devel dbus-devel dbus-glib-devel python3-dbus GConf2-devel pkgconfig libXft-devel
su -c 'git clone -b master git://git.sv.gnu.org/emacs.git ~/lab/emacs' $USER
# locks emacs into March 27th, 2020 release (stable)
su -c 'cd ~/lab/emacs && git checkout 66756df286bea6efd3f9a8290e38e8d77bdf0264' $USER
sleep 1.5s
su -c 'cd ~/lab/emacs && ./autogen.sh' $USER
su -c 'cd ~/lab/emacs && ./configure --without-makeinfo --with-gnutls=ifavailable --with-mailutils' $USER
su -c 'make -C ~/lab/emacs' $USER
cd /home/$USER/lab/emacs && make install && make clean

# fix flathub repo
log "installing flatpaks"
flatpak remote-delete flathub
flatpak remote-add flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak update
sleep 2

# flatpaks
flatpak install -y app/com.nextcloud.desktopclient.nextcloud/x86_64/stable
flatpak install -y app/us.zoom.Zoom/x86_64/stable
flatpak install -y app/com.spotify.Client/x86_64/stable
flatpak install -y app/org.signal.Signal/x86_64/stable
flatpak install -y app/com.github.maoschanz.DynamicWallpaperEditor/x86_64/stable
flatpak install -y app/org.musescore.MuseScore/x86_64/stable
flatpak install -y app/org.libreoffice.LibreOffice/x86_64/stable
flatpak install -y app/org.ksnip.ksnip/x86_64/stable
flatpak install -y nl.hjdskes.gcolor3

# gimp
log "installing gimp and plugins"
flatpak install -y org.gimp.GIMP
flatpak install -y org.gimp.GIMP.Plugin.LiquidRescale
flatpak install -y org.gimp.GIMP.Plugin.GMic
flatpak install -y org.gimp.GIMP.Plugin.FocusBlur
flatpak install -y org.gimp.GIMP.Plugin.Resynthesizer
flatpak install -y org.gimp.GIMP.Plugin.Lensfun
flatpak install -y org.gimp.GIMP.Plugin.Fourier
flatpak install -y org.gimp.GIMP.Plugin.BIMP

# install video and audio codecs
log "installing codecs and players"
flatpak install -y app/org.videolan.VLC/x86_64/stable
flatpak install -y app/com.makemkv.MakeMKV/x86_64/stable
flatpak install -y org.videolan.VLC.Plugin.makemkv/x86_64/3-20.08
flatpak install -y org.freedesktop.Platform.ffmpeg-full/x86_64/19.08
install package gstreamer1-plugins-base gstreamer1-plugins-good gstreamer1-plugins-ugly gstreamer1-plugins-bad-free gstreamer1-plugins-bad-free 
install package gstreamer1-plugins-bad-freeworld gstreamer1-libav ffmpeg
install package obs-studio

# install web browsers
log "installing browsers"
dnf install -y "https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"

# firewall zone update
firewall-cmd --new-zone=webserver --permanent
firewall-cmd --reload
for i in $(firewall-cmd --zone public --list-interfaces); do  firewall-cmd --zone webserver --change-interface=$i --permanent; done
for i in $(firewall-cmd --zone public --list-interfaces); do  firewall-cmd --zone public --remove-interface=$i --permanent; done
for i in $(firewall-cmd --zone public --list-services); do  firewall-cmd --zone webserver --add-service $i --permanent; done
for i in $(firewall-cmd --zone public --list-services); do  firewall-cmd --zone public --remove-service=$i --permanent; done
sed -i  's/^AllowZoneDrifting\=yes/AllowZoneDrifting\=no/g' /etc/firewalld/firewalld.conf
firewall-cmd --reload

# Vagrant and Virtualbox
# download extensions at: http://download.virtualbox.org/virtualbox/ 
# # # # # # # # # # # # # # #
log "installing Vagrant and Virtualbox"
install package binutils kernel-devel kernel-headers libgomp make patch gcc glibc-headers glibc-devel dkms
dnf install -y https://download.virtualbox.org/virtualbox/6.1.18/VirtualBox-6.1-6.1.18_142142_el8-1.x86_64.rpm
dnf install -y https://releases.hashicorp.com/vagrant/2.2.14/vagrant_2.2.14_x86_64.rpm
# custom xdebug port
firewall-cmd --permanent --zone=webserver --add-port=9003/tcp
semanage port -a -t http_port_t -p tcp 9003
usermod -aG vboxusers $USER
/usr/lib/virtualbox/vboxdrv.sh setup

# add desktop applications
su -c 'touch ~/.local/share/applications/neomutt.desktop' $USER
printf "[Desktop Entry] \n\
Type=Application\n\
Name=Mail\n\
Exec=kitty -e neomutt\n\
" >> /home/$USER/.local/share/applications/neomutt.desktop
su -c 'touch ~/.local/share/applications/ranger.desktop' $USER
printf "[Desktop Entry] \n\
Type=Application\n\
Name=Ranger\n\
Exec=kitty -e ranger\n\
" >> /home/$USER/.local/share/applications/ranger.desktop

# documentation
# # # # # # # # # # # # # # #
install package rsyslog-doc

# Installing configuration
# # # # # # # # # # # # # # #
log "installing custom configuration"
$SHELL -c "`curl -fsSL https://raw.githubusercontent.com/bridgesense/dotfiles/master/setup`"
su -c '$SHELL -c "`curl -fsSL https://raw.githubusercontent.com/bridgesense/dotfiles/master/setup`"' $USER
su -c 'cp -f ~/.yadrlite/redhat/Xresources ~/.Xresources' $USER
cp -f ~/.yadrlite/redhat/Xresources ~/.Xresources
su -c "cp -r ~/.yadrlite/redhat/kitty ~/.config" $USER
su -c "cp -r ~/.yadrlite/redhat/nvim ~/.config" $USER
cp -r ~/.yadrlite/redhat/nvim ~/.config
su -c "cp -r ~/.yadrlite/redhat/ranger ~/.config" $USER
cp -r ~/.yadrlite/redhat/ranger ~/.config
find /home/$USER/.config -type d -exec chmod 0755 {} \;
find /home/$USER/.config -type f -exec chmod 0644 {} \;
find /home/$USER/.config -name "*.sh" -execdir chmod u+x {} +

# Adds Nerdfonts DejaVuSansMono
su -c 'mkdir -p ~/.local/share/fonts/' $USER
su -c 'cd ~/.local/share/fonts && svn checkout --non-interactive https://github.com/ryanoasis/nerd-fonts/trunk/patched-fonts/DejaVuSansMono' $USER

# misc sanity improvements
git config --global core.askpass ""

# selinux
ausearch -c 'rtkit-daemon' --raw | audit2allow -M my-rtkitdaemon
semodule -X 300 -i my-rtkitdaemon.pp

log "Installation complete.  Please reboot your system."
printf "\r# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\r"
printf "ALL DONE.  PLEASE REBOOT YOUR SYSTEM."
