#!/usr/bin/env bash
# This script is just a personal snapshot of my rhel workstation.
# subscription-manager repos --enable "codeready-builder-for-rhel-8-$(arch)-rpms"
# $SHELL install-redhat-sup <username>
# # # # # # # # # # # # # # #

# Options
# # # # # # # # # # # # # # #
USER="${1:francis}"
LOGFILE='/root/workstation-installation.log'

# Functions
# # # # # # # # # # # # # # #
function log {
    if [ -f "$LOGFILE" ]; then
        echo $1 >> $LOGFILE
    else
        echo $1 > $LOGFILE
    fi
}

function install {
    arr=("$@")
    _type=
    if [[ "$(declare -p arr)" =~ "declare -a" ]]; then
        for package in "${arr[@]}"; do
            if [[ $package == "package" ]]; then 
                _type=$package 
                continue
            fi
            if [[ $package == "group" ]]; then
                _type=$package
                continue
            fi
            if [[ $package == "module" ]]; then
                _type=$package
                continue
            fi
            cnt=3
            while [ $cnt -gt 0 ]; do
                if dnf list installed $package > /dev/null 2>&1; then
                    break;
                else
                    if [[ $_type == "group" ]]; then
                        dnf group install -y $package
                        break;
                    elif [[ $_type == "module" ]]; then
                        dnf module install -y $package
                        break;
                    else
                        dnf install -y $package
                    fi
                fi
                let "cnt-=1"
            done
            if ! dnf list installed $package > /dev/null 2>&1 && [[ $_type != "group" ]]; then
                log "There was a problem installing ${package}.  Please make sure this package exists."
            fi
        done
    else
        log "Warning! Passed variable is not an array".
    fi
}

# Run as root
# Enable Repos
# # # # # # # # # # # # # # #
log "Enable Repos"
dnf update -y
dnf upgrade -y
dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
dnf install -y https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm 
dnf install -y https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-8.noarch.rpm
dnf update

# Run as root
# Commandline Tools
# # # # # # # # # # # # # # #
log "installing commandline tools"
install group 'Development Tools'
install package git ack 'the_silver_searcher'
install package isync msmtp pass ctags-etags
install module nodejs python36 ruby java-1.8.0-openjdk java-1.8.0-openjdk-devel
install module 'php:7.4'
install module 'perl:5.26'
install module 'maven'
install module 'subversion:1.14'
install package yarn golang bison ruby-devel rpmfusion-free-release-tainted
# setting up nodejs
npm install -g n
/usr/local/bin/n stable 
npm install -g npm@latest
npm install -g npm
nvm install 14.18.1
nvm use 14.18.1
npm install -g n grunt-cli coffeelint eslint csslint gulp typescript

$SHELL -c "`curl -fsSL https://raw.githubusercontent.com/bridgesense/dotfiles/master/setup`"
su -c '$SHELL -c "`curl -fsSL https://raw.githubusercontent.com/bridgesense/dotfiles/master/setup`"' $USER
gem update --no-user-install

# install composer
# # # # # # # # # # # # # # #
curl https://getcomposer.org/composer-stable.phar >> /usr/local/bin/composer
chmod +x /usr/local/bin/composer

# install coding tools
install package freetype-devel fontconfig-devel libxcb-devel kitty tmux xclip
update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /bin/kitty 50
su -c "gsettings set org.gnome.desktop.default-applications.terminal exec kitty" $USER
su -c "makedir -p ~/lab" $USER
install package cmake gcc-c++ libtool
su -c 'git clone https://github.com/neovim/neovim.git ~/lab/nvim' $USER
cd /home/$USER/lab/nvim
make CMAKE_BUILD_TYPE=RelWithDebInfo
make install && make clean
ln -s /usr/local/bin/nvim /usr/bin/nvim
npm install -g neovim
install module container-tools
pip3 install pynvim
pip3 install neovim
gem install --no-user-install neovim
gem install --no-user-install compass

# addtiional python tools
python3 -m pip install --upgrade pip
pip3 install virtualenv

# ueberzug plugin
install package platform-python-devel libX11-devel libXext-devel perl-Image-ExifTool
pip3 install ueberzug

# nnn
install package ncurses-devel readline-devel tree mediainfo
cd /home/$USER/lab
su -c 'git clone https://github.com/jarun/nnn.git ~/lab/nnn' $USER
cd /home/$USER/lab/nnn
make O_NERD=1
cp nnn /usr/bin
su -c 'mkdir -p ~/.config/nnn/plugins' $USER
su -c 'cd ~/.config/nnn/plugins && $SHELL -c "`curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs`"' $USER

# go
su -c '$SHELL -c "`curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer`"' $USER
source /home/$USER/.gvm/scripts/gvm
su -c 'gvm install go1.17' $USER 
printf 'gvm use go1.17 > /dev/null 2>&1' >> /home/$USER/.bashrc

# hugo
cd /home/$USER/lab
su -c 'git clone https://github.com/gohugoio/hugo.git' $USER
# run as user
# cd ~/lab/hugo
# CGO_ENABLED=1 go install --tags extended

# zoom conferencing
dnf install -y https://zoom.us/client/latest/zoom_x86_64.rpm 

# dmg2img for mac vm
dnf install -y "https://archives.fedoraproject.org/pub/archive/epel/6/x86_64/Packages/d/dmg2img-1.6.2-2.el6.x86_64.rpm"

# install supplementary packages
install package gnome-tweaks
install package NetworkManager-openvpn-gnome NetworkManager-openconnect-gnome
install package aspell-en 'texlive*'
install package clamav clamav-update
install package brasero
install package youtube-dl
install package w3m w3m-img
install package ftp telnet
install package hplip hplip-gui simple-scan
install package lm-sensors
install package libcaca
install package flameshot
install package SDL2-devel SDL2-static
install package obs-studio

# workaround for system tray bug
# open gnome tweak > Extensions > Kstatusnotifieritem/appindicator support
install package gnome-shell-extension-appindicator

# swap escape with caps lock
printf "\
Section \"InputClass\"\n\
        Identifier      \"system-keyboard\"\n\
        MatchIsKeyboard     \"on\"\n\
        Option          \"XkbLayout\" \"us\"\n\
        Option          \"XkbModel\"  \"pc104\"\n\
        Option          \"XkbOptions\" \"caps:swapescape\"\n\
EndSection\n\
" > /etc/X11/xorg.conf.d/00-keyboard.conf

# exfat
install package xfat-utils fuse-exfat

# Gnome Extensions
# Put Windows, used for quartering screens with hotkeys in gnome
# keybind fashion

# Unblank lock screen, only sure way to prevent computer from freezing
# when waking up a blank monitor.

# Keep awake!, quicker than digging into settings to keep screen awake

# compiles emacs 27
# for much better speed and compatibitily
# WARNING: emacs X11 will crash with pacakge: google-noto-emoji-color-fonts
# # # # # # # # # # # # # # #
log "compiling emacs 27"
install package gnutls-utils gtk3-devel gtk2-devel libXpm-devel libpng-devel giflib-devel libtiff-devel libjpeg-devel ncurses-devel gpm-devel dbus-devel dbus-glib-devel python3-dbus GConf2-devel pkgconfig libXft-devel texinfo
su -c 'git clone https://git.savannah.gnu.org/git/emacs.git  ~/lab/emacs' $USER
# locks emacs into Oct 13th, 2021 release (stable)
su -c 'cd ~/lab/emacs && git checkout aed4aec6bb6509234d1e9f2590d8f6b082885be1' $USER
sleep 1.5s
su -c 'cd ~/lab/emacs && ./autogen.sh' $USER
su -c 'cd ~/lab/emacs && ./configure --without-makeinfo --with-gnutls=ifavailable --with-mailutils' $USER
su -c 'make -C ~/lab/emacs' $USER
cd /home/$USER/lab/emacs && make install && make clean

log "compiling neomutt"
install package gcc gettext-devel libidn-devel ncurses-devel slang-devel tcl
install package docbook-dtds docbook-style-xsl libxslt lynx
install package gnutls-devel cyrus-sasl-devel gpgme-devel krb5-devel
install package tokyocabinet-devel
install package urlview
su -c 'git clone https://github.com/neomutt/neomutt.git ~/lab/neomutt' $USER
su -c 'cd ~/lab/neomutt && ./configure --with-sasl=/usr/bin --with-ssl=/usr/bin --with-gpgme=/bin --with-gnutls=/bin' $USER
su -c 'make -k -C ~/lab/neomutt' $USER
cd /home/$USER/lab/neomutt && make install && make clean

# fix flathub repo
log "installing flatpaks"
flatpak remote-delete flathub
flatpak remote-add flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak update
sleep 2

# flatpaks
flatpak install -y app/org.signal.Signal/x86_64/stable
flatpak install -y app/com.github.maoschanz.DynamicWallpaperEditor/x86_64/stable
flatpak install -y app/org.musescore.MuseScore/x86_64/stable
flatpak install -y app/org.libreoffice.LibreOffice/x86_64/stable
flatpak install -y nl.hjdskes.gcolor3

# gimp
log "installing gimp and plugins"
flatpak install -y org.gimp.GIMP
flatpak install -y org.gimp.GIMP.Plugin.LiquidRescale
flatpak install -y org.gimp.GIMP.Plugin.GMic
flatpak install -y org.gimp.GIMP.Plugin.FocusBlur
flatpak install -y org.gimp.GIMP.Plugin.Resynthesizer
flatpak install -y org.gimp.GIMP.Plugin.Lensfun
flatpak install -y org.gimp.GIMP.Plugin.Fourier
flatpak install -y org.gimp.GIMP.Plugin.BIMP
flatpak install -y org.gimp.GIMP.Plugin.GMic

# install video and audio codecs
log "installing codecs and players"
flatpak install -y app/org.videolan.VLC/x86_64/stable
flatpak install -y app/com.makemkv.MakeMKV/x86_64/stable
flatpak install -y org.videolan.VLC.Plugin.makemkv/x86_64/3-20.08
install package gstreamer1-plugins-base gstreamer1-plugins-good gstreamer1-plugins-ugly gstreamer1-plugins-bad-free gstreamer1-plugins-bad-free 
install package gstreamer1-plugins-bad-freeworld gstreamer1-libav ffmpeg libdvdcss

# install web browsers
log "installing browsers"
dnf install -y "https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"

# firewall zone update
firewall-cmd --new-zone=webserver --permanent
firewall-cmd --reload
for i in $(firewall-cmd --zone public --list-interfaces); do  firewall-cmd --zone webserver --change-interface=$i --permanent; done
for i in $(firewall-cmd --zone public --list-interfaces); do  firewall-cmd --zone public --remove-interface=$i --permanent; done
for i in $(firewall-cmd --zone public --list-services); do  firewall-cmd --zone webserver --add-service $i --permanent; done
for i in $(firewall-cmd --zone public --list-services); do  firewall-cmd --zone public --remove-service=$i --permanent; done
sed -i  's/^AllowZoneDrifting\=yes/AllowZoneDrifting\=no/g' /etc/firewalld/firewalld.conf
firewall-cmd --reload

# Vagrant and Virtualbox
# download extensions at: http://download.virtualbox.org/virtualbox/ 
# # # # # # # # # # # # # # #
log "installing Vagrant and Virtualbox"
install package binutils kernel-devel kernel-headers libgomp make patch gcc glibc-headers glibc-devel dkms VirtualBox
dnf install akmod-VirtualBox kernel-devel-$(uname -r)
# custom xdebug port
firewall-cmd --permanent --zone=webserver --add-port=9003/tcp
semanage port -a -t http_port_t -p tcp 9003
usermod -aG vboxusers $USER
akmods; systemctl restart vboxdrv.service

# add desktop applications
su -c 'touch ~/.local/share/applications/neomutt.desktop' $USER
printf "[Desktop Entry] \n\
Type=Application\n\
Name=Mail\n\
Exec=kitty -e neomutt\n\
Icon=/usr/share/icons/hicolor/256x256/apps/evolution.png\n\
" >> /home/$USER/.local/share/applications/neomutt.desktop
su -c 'touch ~/.local/share/applications/nnn.desktop' $USER
printf "[Desktop Entry] \n\
Type=Application\n\
Name=nnn\n\
Exec=kitty -e nnn\n\
Icon=/home/$USER/lab/nnn/misc/logo/logo.svg\n\
" >> /home/$USER/.local/share/applications/nnn.desktop
su -c 'touch ~/.local/share/applications/flameshot.desktop' $USER

# documentation
# # # # # # # # # # # # # # #
install package rsyslog-doc

# Installing configuration
# # # # # # # # # # # # # # #
log "installing custom configuration"
$SHELL -c "`curl -fsSL https://raw.githubusercontent.com/bridgesense/dotfiles/master/setup`"
su -c '$SHELL -c "`curl -fsSL https://raw.githubusercontent.com/bridgesense/dotfiles/master/setup`"' $USER
su -c 'cp -f ~/.yadrlite/redhat/Xresources ~/.Xresources' $USER
cp -f ~/.yadrlite/redhat/Xresources ~/.Xresources
su -c "cp -r ~/.yadrlite/redhat/kitty ~/.config" $USER
su -c "cp -r ~/.yadrlite/redhat/nvim ~/.config" $USER
cp -r ~/.yadrlite/redhat/nvim ~/.config
find /home/$USER/.config -type d -exec chmod 0755 {} \;
find /home/$USER/.config -type f -exec chmod 0644 {} \;
find /home/$USER/.config -name "*.sh" -execdir chmod u+x {} +

# Adds Nerdfonts DejaVuSansMono
su -c 'mkdir -p ~/.local/share/fonts/' $USER
su -c 'cd ~/.local/share/fonts && svn checkout --non-interactive https://github.com/ryanoasis/nerd-fonts/trunk/patched-fonts/DejaVuSansMono' $USER
su -c 'cd ~/.local/share/fonts && svn checkout --non-interactive https://github.com/ryanoasis/nerd-fonts/trunk/patched-fonts/Inconsolata' $USER
su -c 'cd ~/.local/share/fonts && svn checkout --non-interactive https://github.com/ryanoasis/nerd-fonts/trunk/patched-fonts/FiraCode' $USER

# misc sanity improvements
git config --global core.askpass ""

# improve sound
su -c 'touch ~/.config/pulse/daemon.conf' $USER
printf "high-priority = yes\n\
realtime-scheduling = yes\n\
realtime-priority = 9\n\
nice-level = -11\n\
\n\
default-sample-format = s32le\n\
default-sample-rate = 192000\n\
resample-method = speex-float-5\n\
\n\
default-sample-channels = 2\n\
remixing-produce-lfe = no\n\
remixing-consume-lfe = yes\n\
\n\
avoid-resampling = no\n\
" >> /home/$USER/.config/pulse/daemon.conf

# keyboard changes
gsettings set org.gnome.settings-daemon.plugins.media-keys volume-mute '[]'
gsettings set org.gnome.settings-daemon.plugins.media-keys screenshot '[]'
gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/','/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/']"
gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'master mute'
gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command 'amixer -D pulse sset Master toggle'
gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding 'AudioMute'
gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ name 'flameshot'
gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ command '/usr/bin/flameshot gui'
gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ binding 'Print'

log "Installation complete.  Please reboot your system."
printf "\r# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\r"
printf "ALL DONE.  PLEASE REBOOT YOUR SYSTEM."
